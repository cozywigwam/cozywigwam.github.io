#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: no_export
#+BEGIN_EXAMPLE
---
layout: post
title: "JavaScript"
categories: notation
subtitle: JavaScript Wins
---
#+END_EXAMPLE

* testing with code blocks

#+BEGIN_SRC js
let colors = [ "red", "purple", "green" ];
if (x) {
  console.log('cl');
}
let [ firstColor, ...remain ] = colors;
console.log(firstColor);
console.log(remain);
#+END_SRC

#+RESULTS:
: red
: [ 'purple', 'green' ]
: undefined

#+BEGIN_SRC js2
if (x) {
  console.log('zxcv');
}
let colors = [ "red", "purple", "green" ];
let [ firstColor, ...remain ] = colors;
console.log(firstColor);
console.log(remain);
#+END_SRC



* Arrays

** Copying

[[https://stackoverflow.com/questions/7486085/copying-array-by-value-in-javascript/23536726#23536726][Good SO answer]]

If it's an array of primitives, use ~slice()~ (or ~concat()~):

#+BEGIN_SRC js
var myArray = [3, "str", true];

var dupe = myArray.slice();
// or
var dupe2 = myArray.concat();
dupe[0] = 4;
console.log('myArray', myArray);
#+END_SRC

If it's an array of objects, this will result in a shallow copy:

#+BEGIN_SRC js
var myObjArray = [
  {
    name: 'Miles',
    instrument: 'trumpet'
  },
  {
    name: 'John',
    instrument: 'saxophone'
  }
]

var shallowDupe = myObjArray.slice();
shallowDupe[0].name = 'Clifford';

console.log('myObjArray', myObjArray); // Clifford overwrote Miles
#+END_SRC

Instead, one alternative is to stringify and parse:

#+BEGIN_SRC js
var myObjArray = [
  {
    name: 'Miles',
    instrument: 'trumpet'
  },
  {
    name: 'John',
    instrument: 'saxophone'
  }
]

var dupe = myObjArray.slice();
// dupe[0].name = 'Clifford'; // would overwrite myObjArray

var dupe2 = JSON.parse(JSON.stringify(myObjArray));
dupe2[0].name = 'Dexter'; // myObjArray and dupe2 are different
#+END_SRC

* Destructuring

** Arrays

** Objects

#+BEGIN_SRC js :cmd "org-babel-node"
  let structured = {
    title: 'structured title',
    description: 'structured desc'
  }

  const { title, description } = structured;

  console.log(title);
  console.log(description);
#+END_SRC

#+RESULTS:
: structured title
: structured desc
: undefined


#+BEGIN_SRC js :cmd "org-babel-node --presets=stage-2"
let obj1 = {
  bird: "falcon2",
  frog: "bullfrog"
}
let { bird, frog: frogName } = obj1;
console.log(bird);
console.log(frogName);

let obj2 = {
  fruit: "apple",
  veggie: "kale",
  meat: "tofuball"
}
let { fruit, ...restItem } = obj2;
console.log(fruit);
console.log(restItem);
#+END_SRC

#+RESULTS:


* Styling

** Styled Components

*** Smashing Magazine best practices
Max Stoiber, best practices from [Smashing Magazine](https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/). Three main best practices:
1 - building small, focused and independent components
2 - splitting container and presentational components
    - keep data/logic ("container components that render presentational components") and presentation/styling components separate
3 - single-use CSS names

- remove the map between styles and components


*** YouTube video about styling components

#+BEGIN_SRC js
import Button from './Button';

const Home = () =>
  <div>
    <Button>btn main</Button>
    <Button primary href="https://duckduckgo.com">btn2</Button>
    <Button danger>danger</Button>
  </div>
#+END_SRC


#+BEGIN_SRC js
const Button = ({ primary, danger, className, ...props }) => {
  const Tag = props.href ? "a" : "button"

  return <Tag
    type="button"
    className={cn(
      'btn',
      primary && 'btn-primary',
      danger && 'btn-danger',
      className)}
    {...props}
  />
}

const DangerBtn = props =>
  <Button
    danger
    {...props}
  />

const PrimaryBtn = props =>
  <Button
    primary
    {...props}
  />

export default Button
#+END_SRC






* React

** Components

*** Syntax

1) no props needed

#+BEGIN_SRC js
const PostLink = () =>
  <PostHeader>
    <PostTitle><StyledLink to={path}>{title}</StyledLink></PostTitle>
    <PostDescription>{description}</PostDescription>
  </PostHeader>
#+END_SRC

2) props without being a class

#+BEGIN_SRC js
const PostLink = props => {
  const { title, description, path } = props.postData;

  return (
    <PostHeader>
      <PostTitle><StyledLink to={path}>{title}</StyledLink></PostTitle>
      <PostDescription>{description}</PostDescription>
    </PostHeader>
  )
}
export default PostLink
#+END_SRC

3) class

#+BEGIN_SRC js
export default class PostLink extends React.Component {
  render() {
    const { title, description, path } = this.props.postData;

    return (
      <PostHeader>
        <PostTitle><StyledLink to={path}>{title}</StyledLink></PostTitle>
        <PostDescription>{description}</PostDescription>
      </PostHeader>
    );
  }
}
#+END_SRC


* Ramda

Same lookup on two data sets:

#+BEGIN_SRC js

#+END_SRC
* Misc

"Module request format," /a la node/: starts-with-dot is local.

** prettier

With <a href="https://github.com/typicode/husky" target="_blank">husky</a> and <a href="https://github.com/okonet/lint-staged" target="_blank">lint-staged</a.

#+BEGIN_SRC js
/* package.json */

// ...

"scripts": {
  "precommit": "lint-staged",

// ...

"lint-staged": {
  "src/**/*.{js,jsx,json,css,scss}": [
    "prettier --single-quote --jsx-bracket-same-line --trailing-comma es5 --write",
    "git add"
  ]
},

// ...

#+END_SRC

*** run it through files

#+BEGIN_SRC sh
prettier --single-quote --jsx-bracket-same-line --trailing-comma es5 --write "src/**/*.{js,jsx,json,css,scss}"
prettier --single-quote --jsx-bracket-same-line --trailing-comma es5 --write "**/*.js"
#+END_SRC

*** reference

<a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#formatting-code-automatically" target="_blank">CRA docs<a/>


* SCRATCH / TEST :no_export:

#+BEGIN_SRC js :cmd "org-babel-node"
let props = {
  object: {},
  string: '',
  array: []
}
console.log(props);
#+END_SRC

#+RESULTS:
: { postData: { title: 'pd-title', description: 'pd-desc', path: 'pd-path' },
:   title: 'reg-title',
:   description: 'reg-desc',
:   path: 'reg-path' }
: undefined


#+BEGIN_SRC js :cmd "org-babel-node --presets=es2015"
  const animals = ['dog', 'cat']

  animals.map((anim) => {
    console.log('anim', anim);
  })
#+END_SRC

#+RESULTS:
: anim dog
: anim cat
: undefined
