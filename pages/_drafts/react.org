---
layout: post
title: "React"
categories: notation
---

* Router

** npm/package

*** old is 'react-router'
*** new is 'react-router-dom' or 'react-router-native' (both will include 'react-router')

** resources
*** Paul Sherman's [[https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf][A Simple React Router v4 Tutorial]]

"Anywhere that you want to only render something if it matches the URL's pathname, you should create a <Route> element."



* JSX
** Conditionals
*** simple if
#+BEGIN_SRC js :cmd "org-babel-node"
{
  props.link.isAvailable &&
  <Link to={ head.link.url }>{ props.link.name </Link>
}
#+END_SRC

*** simple if, larger
#+BEGIN_SRC
{ this.state.isOverlayOpen &&
  <Overlay>
    <h1>Site Name</h1>
    <Nav/>
  </Overlay>
}
#+END_SRC


* 3rd-party
** Phenomic
*** Custom Layout

[[https://phenomic.io/docs/getting-started/#the-body][docs]]

- register layout in `src/routes.js`, add file to `/src/layouts/`
- head values map to `props.head`

*** Scaffolds
**** Base styled component

#+BEGIN_SRC js
import React from "react"
import PropTypes from 'prop-types'

import styles from "./index.css"

const ExampleComponent = (props) => (
  <div className={ styles.layout }>
    { props.children }
  </div>
)

ExampleComponent.propTypes = {
  children: PropTypes.node,
}

export default ExampleComponent
#+END_SRC

#+BEGIN_SRC css
.layout {
  margin: var(--base-margin);
}
#+END_SRC

**** Styled component with prop options

#+BEGIN_SRC js
import React, { PropTypes } from "react"
import cx from "classnames"

import styles from "./index.css"

const Button = ({ className, secondary, big, ...otherProps }) => (
  <span
    role="button"
    { ...otherProps }
    className={ cx({
      [className]: className,
      [styles.button]: true,
      [styles.secondary]: secondary,
      [styles.big]: big,
    }) }
  />
)

Button.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  secondary: PropTypes.bool,
  big: PropTypes.bool,
}

Button.displayName = "Button"

export default Button
#+END_SRC

#+BEGIN_SRC css
.button {
  display: inline-flex;
  padding: 0 1rem;
  color: var(--colorPrimary);
}
.secondary {
  color: var(--colorSecondary);
}
.big {
  font-size: 1.5rem;
}
#+END_SRC

Usage:

#+BEGIN_SRC js
import Button from "../../components/Button"

// ...

<Button secondary>{ "Read More â†’" }</Button>
#+END_SRC
