#+OPTIONS: toc:nil -:nil H:6 ^:nil html-style:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css" />
#+EXCLUDE_TAGS: no_export
* COMMENT Local Variables
  # Local Variables:
  # eval: (add-hook 'after-save-hook 'org-pandoc-export-to-html5 nil t)
  # End:
#+BEGIN_EXAMPLE
---
title: "Algorithms"
layout: notation
description: Basics
path: "/algorithms/"
---
#+END_EXAMPLE

* Big O

- O(n) - linear time, e.g. simple search
- O(log n) - log time, e.g. binary search
- O(n * log n) - fast sorting algorithm, e.g. quicksort
- O(n2

* Binary Search

Split the results in half, and ask higher or lower?

#+BEGIN_SRC python
def binary_search(list, item):
  low = 0
  high = len(list)-1

  while low <= high:
    mid = (low + high) / 2
    guess = list[mid]
    if guess == item:
      return mid
    if guess > item:
      high = mid - 1
    else:
      low = mid + 1
  return None

my_list = [1, 3, 5, 7, 9]

print binary_search(my_list, 9)
#+END_SRC

* Selection Sort

Run through the whole list to select the highest/lowest, and repeat /n/ times.

** python

#+BEGIN_SRC python
def findSmallest(arr):
  # smallest = arr[0]
  smallest_index = 0
  for i in range(1, len(arr)):
    if arr[i] < smallest:
      smallest = arr[i]
      smallest_index = i
  return smallest_index

def selectionSort(arr):
  newArr = []
  for i in range(len(arr)):
    smallest = findSmallest(arr)
    newArr.append(arr.pop(smallest))
  return newArr

print selectionSort([5, 3, 6, 2, 10])
#+END_SRC

** javascript

#+BEGIN_SRC js
  // array to sort
  var array = [9, 2, 5, 6, 4, 3, 7, 10, 1, 8];

  // swap function helper
  function swap(array, i, j) {
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  function selectionSort(array) {
    for(var i = 0; i < array.length; i++) {
      var min = i;
      for(var j = i + 1; j < array.length; j++) {
        if(array[j] < array[min]) {
          min = j;
        }
      }
      if(i !== min) {
        swap(array, i, min);
      }
    }
    return array;
  }

  console.log(selectionSort(array));
#+END_SRC

#+RESULTS:
: [1 (\, 2) (\, 3) (\, 4) (\, 5) (\, 6) (\, 7) (\, 8) (\, 9) (\, 10)]

* Quicksort

#+BEGIN_SRC python
def quicksort(array):
  if len(array) < 2:
    return arry
  else:
    pivot = array[0]
    less = [i for i in array[1:] if i <= pivot]

    greater = [i for i in array[1:] if i > pivot]

    return quicksort(less) + [pivot] + quicksort(greater)

  print quicksort([10, 5, 2, 3])
#+END_SRC
