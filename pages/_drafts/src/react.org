#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: noexport
#+BEGIN_EXAMPLE
---
title: "React"
layout: notation
description:
path: "/react/"
---
#+END_EXAMPLE

* environment variables (env)

[[https://stackoverflow.com/a/46367006/1052412][SO answer]]

* 3rd-party
** react-transition-group

*** Transition
#+BEGIN_SRC js
import React from 'react';
import Transition from 'react-transition-group/Transition';
import cx from 'classnames';

import './style.css';

const Fade = ({ in: inProp }) => (
  <Transition in={inProp} timeout={2000}>
    {state => (
      <div
        className={cx({
          'animation-fade': true,
          [`animation-fade-${state}`]: state,
        })}>
        I'm A fade Transition!
      </div>
    )}
  </Transition>
);

export default Fade;


// containing file

import Fade from './Fade';

// ...

<Fade in={this.state.in} timeout={500} />

#+END_SRC

The ~div~ inside of <Fade> gets the following classnames:

- exited: ~-exited~
- entering: ~-entering~
- entered: ~-entered~
- exiting: ~-exiting~


*** CSSTransition

#+BEGIN_SRC js
const Fade = ({ children, ...props }) => (
  <CSSTransition {...props} timeout={1000} classNames="animation-fade">
    {children}
  </CSSTransition>
);

// containing file

<Fade appear in={this.state.in}>
  <div className="greeting">Hello world</div>
</Fade>
#+END_SRC

The ~div.greeting~ gets the following classnames:

- exited: nothing
- entering: ~-enter~ & ~-enter-active~
- entered: nothing
- exiting: ~-exit~ & ~-exit-active~

** Phenomic
*** Custom Layout

[[https://phenomic.io/docs/getting-started/#the-body][docs]]

- register layout in `src/routes.js`, add file to `/src/layouts/`
- head values map to `props.head`

*** Scaffolds
**** Base styled component

#+BEGIN_SRC js
import React from "react"
import PropTypes from 'prop-types'

import styles from "./index.css"

const ExampleComponent = (props) => (
  <div className={ styles.layout }>
    { props.children }
  </div>
)

ExampleComponent.propTypes = {
  children: PropTypes.node,
}

export default ExampleComponent
#+END_SRC

#+BEGIN_SRC css
.layout {
  margin: var(--base-margin);
}
#+END_SRC

**** Styled component with prop options

#+BEGIN_SRC js
import React, { PropTypes } from "react"
import cx from "classnames"

import styles from "./index.css"

const Button = ({ className, secondary, big, ...otherProps }) => (
  <span
    role="button"
    { ...otherProps }
    className={ cx({
      [className]: className,
      [styles.button]: true,
      [styles.secondary]: secondary,
      [styles.big]: big,
    }) }
  />
)

Button.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  secondary: PropTypes.bool,
  big: PropTypes.bool,
}

Button.displayName = "Button"

export default Button
#+END_SRC

#+BEGIN_SRC css
.button {
  display: inline-flex;
  padding: 0 1rem;
  color: var(--colorPrimary);
}
.secondary {
  color: var(--colorSecondary);
}
.big {
  font-size: 1.5rem;
}
#+END_SRC

Usage:

#+BEGIN_SRC js
import Button from "../../components/Button"

// ...

<Button secondary>{ "Read More â†’" }</Button>
#+END_SRC

** Gatsby
*** Add Collection Type

#+BEGIN_SRC js :cmd "org-babel-node"
// /pages/index.jsx

  renderNotationHeadingGroups(route) {
    const posts = [];
    route.pages.map(page => {
      if (page.data.layout === 'notation') {
        posts.push(page);
      }
    });

    return posts.map(post => {
      return <HeadingGroup key={uuid()} title={ post.data.title } description={ post.data.description } path={ post.data.path } />
    });
  }
#+END_SRC

#+BEGIN_SRC js :cmd "org-babel-node"
// /wrappers/md.jsx

    if (layout === 'notation' || layout === 'page') {
      template = <Post {...this.props} />;
    } else if (layout === 'error') {
      template = <Error {...this.props} />;
    }
#+END_SRC

* Redux

Reducer function - the pure function that takes the previous state & and the dispatching action, and returns the next state.

* performance

benchmarks comparison generator: https://necolas.github.io/react-native-web/benchmarks/
