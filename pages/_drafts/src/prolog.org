#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: noexport
#+BEGIN_SRC yaml
---
title: "Prolog"
layout: notation
description: Better Than Nokia Snake
path: "/prolog/"
---
#+END_SRC

* Books :noexport:
** [[https://pragprog.com/book/btlang/seven-languages-in-seven-weeks][Seven Languages in Seven Weeks]], by Bruce A. Tate

- facts
- rules

*** day 2 lists & math

counting

#+BEGIN_SRC prolog
count(0, []).
count(Count, [Head|Tail]) :-
    count(Sum, Tail),
    Count is Sum + 1.
#+END_SRC

sum

#+BEGIN_SRC prolog
sum(0, []).
sum(Total, [Head|Tail]) :-
    sum(Sum, Tail),
    Total is Sum + Head.
#+END_SRC

average

#+BEGIN_SRC prolog
average(List) :-
    sum(Sum, List),
    count(Count, List),
    Average is Sum/Count.
#+END_SRC

psuedo reduction for summing [1, 3, 5]

#+BEGIN_SRC prolog
count(0, []).
count(Count, [Head|Tail]) :- count(TailCount, Tail), Count is TailCount + 1.

sum(0, []).
sum(Total, [Head|Tail]) :-
    sum(Sum, Tail),
    Total is Sum + Head

    Total is Sum + 1
    Total is (when Tail is []) + 1
    Total is (sum(Total = Sum, [3, 5])) + 1

    Total is (
        sum(Total = Sum, [3, 5])
        sum(Sum, Tail = [5]),
        Sum is (sum(Total = Sum, [5])
            sum(Sum = 0, Tail = []),
            Sum is 0 + 5 = 5
        ) + 3
    ) + 1

    sum(Total = Sum, [3, 5])
    sum(Sum, Tail = [5]),
    Sum is (when Tail is []) + 1

    sum(Total = Sum, [5])
    sum(Sum = 0, Tail = []),
    Sum is 0 + 1


sum(What, [1, 3, 5]).
#+END_SRC

**** append

#+BEGIN_SRC prolog
append([miles], [sergei], [miles, sergei]).

append([miles], [sergei], Pets).

append([miles], Who, [miles, sergei]).

append(Who, [sergei], [miles, sergei]).

append(Who1, Who2, [miles, sergei, maisey]).
#+END_SRC

**** concatenate

#+BEGIN_SRC prolog
concatenate([], List, List).
concatenate([Head|Tail1], List, [Head|Tail2]) :-
    concatenate(Tail1, List, Tail2).
#+END_SRC

*** lists

#+BEGIN_EXAMPLE
?- [a,b,c] = [A|[A2|A3]].
A = a,
A2 = b,
A3 = [c].

?- [a,b,c] = [A | [A2|A3]].
A = a,
A2 = b,
A3 = [c].

?- [a,b,c] = [A | [A2 |  A3]].
A = a,
A2 = b,
A3 = [c].

?- [a,b,c] = [ A | [ A2 | A3 ] ].
A = a,
A2 = b,
A3 = [c].

?- [ a , b , c ] = [ A | [ A2 | A3 ] ].
A = a,
A2 = b,
A3 = [c].

?- [a,b,c,d,e,f] = [_|[_|[C|_]]].
C = c.

?- [a,b,c,d,e,f] = [_, _, C, _, _, _].
C = c.

?- [a,b,c,d,e,f] = [_, _, [C|_]].
false.

?- [a,b,c,d,e,f] = [_, _|[Head|_]].
Head = c.

?- [a,b,c,d,e,f] = [_, _, C].
false.

?- [a,b,c,d,e,f] = [_, _, C|_].
C = c.
#+END_EXAMPLE

* Misc
** factorial

#+BEGIN_SRC prolog
fac(1, 0).
fac(Fac, N) :- N > 0, N1 is N - 1, fac(RecFac, N1), Fac is RecFac * N.
#+END_SRC

* Language
** tag convention

from http://www.cse.unsw.edu.au/~billw/dictionaries/prolog/comment.html

| ~+~ | instantiated |
| ~-~ | variable     |
| ~?~ | either       |

#+BEGIN_QUOTE
% factorial(+N, -FactorialN).
%% supply a value for N, and FactorialN will be computed.

% member(?Item, ?List).
%% Item and List may either be instantiated, or a variable
%% (but in fact at least one of them must be instantiated!)
#+END_QUOTE
* Reference

- [[http://www.swi-prolog.org/][SWI-Prolog home]]
- [[http://www.cse.unsw.edu.au/~billw/dictionaries/prolog/prolog-about.html][The Prolog Dictionary]]
- [[http://www.amzi.com/AdventureInProlog/advtop.php][Adventure in Prolog]]
