#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: noexport
#+BEGIN_EXAMPLE
---
title: "RegExp"
layout: notation
description: Rolex & Rolodex
path: "/regexp/"
---
#+END_EXAMPLE

* Syntax

** recognized metacharacters

*** multiplier equivalences

| ~*~ | ~{0,}~  |
| ~+~ | ~{1,}~  |
| ~?~ | ~{0,1}~ |

*** BRE

- ~^~
- ~$~
- ~.~
- ~[~
- ~]~
- ~*~

*** ERE

- ~(~
- ~)~
- ~{~
- ~}~
- ~?~
- ~+~
- ~|~

*** ERE all

- ~^~
- ~$~
- ~.~
- ~[~
- ~]~
- ~*~
- ~(~
- ~)~
- ~{~
- ~}~
- ~?~
- ~+~
- ~|~

[[http://www.pcre.org/][PCRE home]]

* Emacs

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-of-Regexps.html#Syntax-of-Regexps][Emacs
Lisp - syntax of regular expressions manual]]

~(~, ~)~, and ~|~ will match exactly, so they must be escaped: ~\(~, ~\)~, ~\|~.

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Special.html#Regexp-Special][Special Characters]]

| ~.~              | any except newline                                  |
| ~*~              |                                                     |
| ~+~              |                                                     |
| ~?~              |                                                     |
| ~*?~, ~+?~, ~??~ | non-greedy                                          |
| ~[~ ... ~]~      | character alternative                               |
| ~[^~ ... ~]~     | "complemented" (non-matching) character alternative |
| ~^~              |                                                     |
| ~$~              |                                                     |
| ~\~              |                                                     |

#+BEGIN_QUOTE
  Note that ‘\' also has special meaning in the read syntax of Lisp
  strings (see String Type), and must be quoted with ‘\'. For example,
  the regular expression that matches the ‘\' character is ‘\'. To write
  a Lisp string that contains the characters ‘\', Lisp syntax requires
  you to quote each ‘\' with another ‘\'. Therefore, the read syntax for
  a regular expression matching ‘\' is "\\".
#+END_QUOTE

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Char-Classes.html#Char-Classes][Character
Classes]]

| ~[:ascii:]~     |
| ~[:alnum:]~     |
| ~[:alpha:]~     |
| ~[:blank:]~     |
| ~[:cntrl:]~     |
| ~[:digit:]~     |
| ~[:graph:]~     |
| ~[:lower:]~     |
| ~[:multibyte:]~ |
| ~[:nonascii:]~  |
| ~[:print:]~     |
| ~[:punct:]~     |
| ~[:space:]~     |
| ~[:unibyte:]~   |
| ~[:upper:]~     |
| ~[:word:]~      |
| ~[:zdigit:]~    |

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Backslash.html#Regexp-Backslash][Backslash
Constructs in Regular Expressions]]

| ~\                 |
| ~\{m\}~            |
| ~\{m,n\}~          |
| ~\(~ ... ~\)~      |
| ~\(?:~ ... ~\)~    |
| ~\(?num:~ ... ~\)~ |
| ~\digit~           |
| ~\w~               |
| ~\W~               |
| ~\scode~           |
| ~\Scode~           |
| ~\cc~              |
| ~\Cc~              |
| ~\[backtick]~      |
| ~\'~               |
| ~\=~               |
| ~\b~               |
| ~\B~               |
| ~\<~               |
| ~\>~               |
| ~\_<~              |
| ~\_>~              |

* Misc

Perl uses a "slightly larger and richer set of notations" ([[https://nostarch.com/tlcl][The Linux Command Line: A Complete Introduction, William E. Schotts, Jr.]]).

* Reference

- [[https://www.regular-expressions.info][Regular-Expressions.info]]

* Terminology

backtracking - unwinding a multiplier to seek an earlier/smaller match—can lead to long execution times

general multiplier - ~{}~ in ~/x{5,10}/~

lookaround - non-character capturing assertions to test before ("lookbehind") and after ("lookahead")
