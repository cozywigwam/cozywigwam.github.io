--------------

** title: "Server Setup" description: Installation Reminders
   :PROPERTIES:
   :CUSTOM_ID: title-server-setup-description-installation-reminders
   :END:

* curl & git are dpkg
  :PROPERTIES:
  :CUSTOM_ID: curl--git-are-dpkg
  :END:

#+BEGIN_SRC sh
    sudo apt-get install curl git
#+END_SRC

* RVM & Ruby
  :PROPERTIES:
  :CUSTOM_ID: rvm--ruby
  :END:

#+BEGIN_SRC sh
    curl -L https://get.rvm.io | bash -s stable
    source ~/.rvm/scripts/rvm
    rvm requirements
    rvm install ruby
    rvm use ruby --default
    rvm list
#+END_SRC

* node is dpkg...
  :PROPERTIES:
  :CUSTOM_ID: node-is-dpkg
  :END:

#+BEGIN_SRC sh
    #sudo apt-get install nodejs npm
#+END_SRC

* ... but use n instead
  :PROPERTIES:
  :CUSTOM_ID: -but-use-n-instead
  :END:

#+BEGIN_SRC sh
    curl -L http://git.io/n-install | bash
    n list # see 'em
#+END_SRC

* see installed packages
  :PROPERTIES:
  :CUSTOM_ID: see-installed-packages
  :END:

#+BEGIN_SRC sh
    dpkg --get-selections | grep -v deinstall
    dpkg --get-selections | grep -i php
#+END_SRC

* jekyll is a gem
  :PROPERTIES:
  :CUSTOM_ID: jekyll-is-a-gem
  :END:

#+BEGIN_SRC sh
    gem install jekyll
#+END_SRC

* set up first user after installation
  :PROPERTIES:
  :CUSTOM_ID: set-up-first-user-after-installation
  :END:

#+BEGIN_SRC sh
    # brew install ssh-copy-id

    ssh-copy-id example_user@200.0.110.1
#+END_SRC

* HTTPS SSL cert with Let's Encrypt
  :PROPERTIES:
  :CUSTOM_ID: https-ssl-cert-with-lets-encrypt
  :END:

Digital Ocean's
[[https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04][tutorial]]
for Let's Encrypt on Ubuntu 16.04.

#+BEGIN_SRC sh
    sudo apt-get -y install bc # auto 'yes' to prompts
    sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt
#+END_SRC

Register the domain with Let's Encrypt.

#+BEGIN_SRC sh
    sudo service nginx stop
    netstat -na | grep ':80.*LISTEN' # sanity check
    cd /opt/letsencrypt
    ./letsencrypt-auto certonly --standalone # launches instructions-led GUI
    sudo ls /etc/letsencrypt/live/YOUR_DOMAIN_NAME # verify
#+END_SRC

Generate Diffie-Hellman Group

#+BEGIN_SRC sh
    sudo openssl dhparam -out /etc/ssl/certs/dhparam_YOUR_DOMAIN_NAME.pem 2048
#+END_SRC

Update the nginx vhost config by changing the main server block to
=listen 443 ssl= with ssl-related directives, then 301 port 80 to https.

#+BEGIN_SRC sh
    server {
        # listen 80 ...
        listen 443 ssl;

        # server_name, etc. ...

        ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/ssl/certs/dhparam_YOUR_DOMAIN_NAME.pem;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security max-age=15768000;
        # location, etc. ...
    }
    server {
        listen 80;
        server_name example.com;
        return 301 https://$host$request_uri;
    }
#+END_SRC
