#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: noexport
#+BEGIN_EXAMPLE
---
title: "Styles"
layout: notation
description: The Weird Kid at the Party
path: "/styles/"
---
#+END_EXAMPLE

* Language
** Custom Properties
*** JavaScript read/write

The custom properties get/set methods are ~getPropertyValue()~ and ~setProperty()~ on the ~document.documentElement.style~ object.

#+BEGIN_SRC css
:root {
  --myProp: red;
}
#+END_SRC

#+BEGIN_SRC js
const styles = document.documentElement.style
const myProp = styles.getPropertyValue('--myProp')
styles.setProperty('--myProp', 'blue')
#+END_SRC

*** Reference

- [[https://twitter.com/malyw][Serg Hespodarets']] [[https://blog.hospodarets.com/css_properties_in_depth][custom props in depth]]
- [[https://blog.hospodarets.com/css_apply_rule][native CSS mixins]]
- [[https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/][Smashing Magazine]]

*** Spec

[[https://www.w3.org/TR/css-variables/][W3]]

*** Syntax Examples

There are regular variables...:

#+BEGIN_SRC css
:root {
  --site-red: #f00;
}
h1 {
  color: var(--site-red);
}
#+END_SRC

...and mixin-esque custom properties:

#+BEGIN_SRC css
:root {
  --an-argumentless-mixin: {
    color: red;
    border: 1px solid pink;
  }
}
.an-unargumentative-element {
  @apply --an-argumentless-mixin;
}
#+END_SRC

These mixins might require the =Experimental Web Platform features= flag
in Chrome, found here:
=chrome://flags/#enable-experimental-web-platform-features=.

Here are both:

#+BEGIN_SRC css
    :root {
      --my-var: red;
      --my-mixin: {
        color: var(--my-var);
        background: #ccc;
      }
    }
    .lucky-element {
      color: var(--my-var);
    }
    .extra-lucky-element {
      @apply --my-mixin;
    }
#+END_SRC

Note that you cannot overwrite a root variable used by a mixin:

#+BEGIN_SRC css
    :root {
      --not-overwritten-var: 1px;
      --mixin: {
        width: var(--not-overwritten-var);
      }
    }
    .test-element {
      /* you can't do this */
      --not-overwritten-var: 10px;

      /* this mixin gets 1px, not 10px */
      @apply --mixin;
    }
#+END_SRC

** Media Queries
*** Top Level

#+BEGIN_SRC css
    @media (min-width: 480px) {
      .box {
        padding: 20px;
      }
    }

    @custom-media --xs-max (max-width: 479px);
    @media (--xs-max) {}
    @custom-media --sm (min-width: 480px);
    @media (--sm) {}
    @custom-media --sm-max (max-width: 767px);
    @media (--sm-max) {}
    @custom-media --md (min-width: 768px);
    @media (--md) {}
    @custom-media --md-max (max-width: 991px);
    @media (--md-max) {}
    @custom-media --lg (min-width: 992px);
    @media (--lg) {}
    @custom-media --xl (min-width: 1200px);
    @media (--xl) {}
    @custom-media --xxl (min-width: 1600px);
    @media (--xxl) {}

    @media (width >= 500px) and (width <= 1200px) {}

    @custom-media --only-medium-screen (width >= 500px) and (width <= 1200px);
    @media (--only-medium-screen) {}
#+END_SRC

** Nesting
*** Descendent

Use =&= to refer to parent block:

#+BEGIN_SRC css
    div {
      & > span {
        /* direct descendant */
        background: #eee;
      }
      & span {
        /* all within div */
        background: #bbb;
      }
      & ul {
        & span {
          /* this block's `&` refers to `ul`, not `div` */
          background: #999;
        }
      }
    }
#+END_SRC

*** Ascendent

#+BEGIN_SRC css
    .deep-element {
      color: black;

      /* note both `@nest` and `&` */
      @nest body.is-state & {
        color: red;
      }
    }
#+END_SRC

** Reference

[[https://www.w3.org/Style/CSS/specs.en.html][CSS spec]]

** Transforms

Re SVG, it's their object bounding box that gets transformed.

* Libraries
** CSS Modules

- [[https://github.com/css-modules/css-modules]]
- [[https://github.com/css-modules/icss][Interoperable CSS (ICSS)]]

*** Glen Maddern's intro

[[https://glenmaddern.com/articles/css-modules][Glen Maddern's
introduction]]

Each class gets all the styles it needs...

#+BEGIN_SRC css
    /* components/submit-button.css */
    .normal { /* all styles for Normal */ }
    .disabled { /* all styles for Disabled */ }
    .error { /* all styles for Error */ }
    .inProgress { /* all styles for In Progress */ }
#+END_SRC

...by composing:

#+BEGIN_SRC css
    .common {
      /* all the common styles you want */
    }
    .normal {
      composes: common;
      /* anything that only applies to Normal */
    }
    .disabled {
      composes: common;
      /* anything that only applies to Disabled */
    }
    .error {
      composes: common;
      /* anything that only applies to Error */
    }
    .inProgress {
      composes: common;
      /* anything that only applies to In Progress */
    }
#+END_SRC

**** Compose between files

#+BEGIN_SRC css
    /* colors.css */
    .primary {
      color: #720;
    }
    .secondary {
      color: #777;
    }
    /* other helper classes... */
#+END_SRC

**** More examples

#+BEGIN_SRC css
    .element {
      composes: large from "./typography.css";
      composes: dark-text from "./colors.css";
      composes: padding-all-medium from "./layout.css";
      composes: subtle-shadow from "./effect.css";
    }

    /* this short hand: */
    .element {
      composes: padding-large margin-small from "./layout.css";
    }

    /* is equivalent to: */
    .element {
      composes: padding-large from "./layout.css";
      composes: margin-small from "./layout.css";
    }

    /* more examples ... */
    .article {
      composes: flex vertical centered from "./layout.css";
    }

    .masthead {
      composes: serif bold 48pt centered from "./typography.css";
      composes: paragraph-margin-below from "./layout.css";
    }

    .body {
      composes: max720 paragraph-margin-below from "layout.css";
      composes: sans light paragraph-line-height from "./typography.css";
    }
#+END_SRC

** cssnext
*** Phenomic setup

Directory setup (with the global styles file renamed and moved to
=styles/=):

#+BEGIN_EXAMPLE
    .
    ├── content
    │   ├── assets
    │   │   └── portfolio
    │   ├── pages
    │   └── ...
    ├── dist
    ├── scripts
    └── src
        ├── components
        │   └── ...
        ├── layouts
        │   └── ...
        └── styles

    ./
    package.json
    postcss.config.js
    variables.js
    webpack.config.js

    ./src/styles/
    headings.css
    highlight.css
    mixins.css
    phenomic-base.css
    reset.css
    styles.global.css

    /* styles.global.css */
    @import './reset.css';
    @import './phenomic-base.css';

    @import './mixins.css';
    @import './headings.css';
    @import './highlight.css';
#+END_EXAMPLE

In order to import these CSS files, add =require('postcss-import')(),=
to =postcss.config.js=:

#+BEGIN_SRC js
    // postcss.config.js
    const vars = require('./variables.js');

    module.exports = (config) => [
        require("stylelint")(),
        require('postcss-import')(),
        require("postcss-cssnext")({
          // ref: http://cssnext.io/usage/
          browsers: "last 2 versions",
          features: {
            customProperties: {
              variables: vars,
            },
          },
        }),
        require("postcss-reporter")(),
        ...!config.production ? [
          require("postcss-browser-reporter")(),
        ] : [],
      ]
#+END_SRC

Also note the external =variables.js= file:

#+BEGIN_SRC js
    // variables.js
    module.exports = {
      myVar: 'orange',
    }
#+END_SRC

*** Reference

- [[http://cssnext.io/][cssnext home]]
- [[http://ricostacruz.com/cheatsheets/cssnext.html][Rico St. Cruz's
  cheatsheet]]

** Styled Components

https://www.styled-components.com/docs/api#taggedtemplateliteral

*** Examples
**** css

https://www.styled-components.com/docs/api#css

#+BEGIN_SRC js
import styled, { css } from 'styled-components'

const complexMixin = css`
  color: ${props => (props.whiteColor ? 'white' : 'black')};
`

const StyledComp = styled.div`
  /* This is an example of a nested interpolation */
  ${props => (props.complex ? complexMixin : 'color: blue;')};
`
#+END_SRC

**** With props :noexport:

#+BEGIN_SRC js

#+END_SRC

**** With ~.attrs~

[[https://www.styled-components.com/docs/api#attrs][docs - API - .attrs]]

#+BEGIN_SRC js
const Input = styled.input.attrs({
  type: 'text',
  size: props => (props.small ? 5 : undefined),
})`
  border-radius: 3px;
  border: 1px solid palevioletred;
  display: block;
  margin: 0 0 1em;
  padding: ${props => props.padding};

  ::placeholder {
    color: palevioletred;
  }
`
#+END_SRC

[[https://www.styled-components.com/docs/basics#attaching-additional-props][docs - basics - Attaching additional props]]

#+BEGIN_SRC js
const Input = styled.input.attrs({
  // we can define static props
  type: "password",

  // or we can define dynamic ones
  margin: props => props.size || "1em",
  padding: props => props.size || "1em"
})`
  color: palevioletred;
  font-size: 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;

  /* here we use the dynamically computed props */
  margin: ${props => props.margin};
  padding: ${props => props.padding};
`;
#+END_SRC

**** Extending styles

https://www.styled-components.com/docs/basics#extending-styles

#+BEGIN_SRC js
// The Button from the last section without the interpolations
const Button = styled.button`
  color: palevioletred;
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;

// We're extending Button with some extra styles
const TomatoButton = Button.extend`
  color: tomato;
  border-color: tomato;
`;
#+END_SRC

**** Styling a styled component :noexport:
**** Intermediate styled component

#+BEGIN_SRC js
// SpecialButton.js

import styled from 'styled-components';

const InnerSpecialButton = styled.div`
  position: absolute;
  left: ${(props) => (props.open) ? `${props.width}px` : 'none'};
`
export const SpecialButton = ({open, text}) => {
  return (
    <InnerSpecialButton {open}>
      <span><img src="img" />{text}</span>
    </InnerSpecialButton>
  )
}

// usage
import { SpecialButton } from './SpecialButton.js'

<div>
  <SpecialButton />
</div>
#+END_SRC

**** Siblings (div + div)

[[https://www.styled-components.com/docs/basics#pseudoelements-pseudoselectors-and-nesting][documentation - Pseudoelements, pseudoselectors, and nesting]]

#+BEGIN_SRC js
const Dot = styled.div`
  margin-left: 0;

  & + & {
    margin-left: 20px;
  }
`
#+END_SRC

**** vertical align

#+BEGIN_SRC js
export const VAlign = styled.div`
  display: inline-flex;
  height: 100%;
  flex-direction: column;
  justify-content: center;
`;

const Header = (
  <Header>
    <VAlign>
      <Logo />
    </VAlign>
  </Header>)
#+END_SRC

*** Misc

boolean props to ~Link~ with ~react-router~ throws an error:

#+BEGIN_EXAMPLE
index.js:1452 Warning: Received `true` for a non-boolean attribute `xhighlight`.

If you want to write it to the DOM, pass a string instead: xhighlight="true" or xhighlight={value.toString()}.
#+END_EXAMPLE

https://github.com/styled-components/styled-components/issues/1198#issuecomment-336628848

#+BEGIN_SRC js
export const DisplayLink = styled(Link)`
  color: ${props => props.highlight && 'red'};
`;

<DisplayLink to="/" highlight>home</DisplayLink>
#+END_SRC

*** Reference
**** Smashing Magazine best practices

[[https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/][Styled Components: Enforcing Best Practices In Component-Based Systems]], [[https://mxstbr.com/][Max Stoiber]]:

- building small, focused and independent components
- splitting container and presentational components
  - keep data/logic ("container components that render presentational components") and presentation/styling components separate
- single-use CSS names

> The basic idea of styled components is to enforce best practices by removing the mapping between styles and components.

*** Theme

https://www.styled-components.com/docs/advanced

#+BEGIN_SRC js
const Button = styled.button`
  color: ${props => props.theme.primaryColor};
  border: 2px solid ${props => props.theme.primaryColor};
`;

// fallback
Button.defaultProps = {
  theme: {
    primaryColor: "red"
  }
}

// usage...
import { ThemeProvider } from 'styled-components'

const theme = {
  primaryColor: "red"
};

render(
  <div>
    <Button>defaultProps fallback</Button>

    <ThemeProvider theme={theme}>
      <Button>"provided" theme</Button>
    </ThemeProvider>
  </div>
);
#+END_SRC

* Misc

#+BEGIN_SRC css
.why-is-this-hard-for-me-to-remember {
  white-space: nowrap;
}
#+END_SRC

** Sass variable interpolation

[[http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_][ref]]

#+BEGIN_SRC sass
$multiplier-sm: #f00;

.el {
  width: calc(10% * #{$multiplier-sm});
}
#+END_SRC

** Styles in HTML

#+BEGIN_HTML
  <head>
#+END_HTML

CSS Styles in the head

[[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style][MDN]]

#+BEGIN_SRC html
<link href="styles/main.css" rel="stylesheet">

<style>
    body { display: none; }
</style>

<!-- optional [MIME] `type` attribute defauts to `text/css`, i.e. <style type="text/css" /> -->
#+END_SRC

** Paragraph line width in em

Proper main-content line lengths, in em,
[[http://maxdesign.com.au/articles/ideal-line-length-in-ems/][ref]]:

#+BEGIN_QUOTE
  As you can see, the average seems to suggest that your container width
  should be set between the narrowest width of 21em (approx 49
  characters per line) to the widest width of 30em (approx 71 characters
  per line).
#+END_QUOTE

** clearfix

#+BEGIN_EXAMPLE
    .clearfix:after {
      content: "";
      display: table;
      clear: both;
    }
#+END_EXAMPLE

** text selection

#+BEGIN_SRC css
::selection { ... }
#+END_SRC

** browserlist

[[https://css-tricks.com/browserlist-good-idea/][Chris Coyier's
write-up]]
