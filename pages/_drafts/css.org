---
layout: post
title: "CSS"
categories: notation
---

* General
** Reference
- [CSS Spec]

** Variables
*** Spec
**** [[https://www.w3.org/TR/css-variables/][W3]]
*** Syntax Examples

#+BEGIN_SRC css
:root {
  --my-var: red;

  --my-mixin: {
    color: var(--my-var);
    background: #ccc;
  }
}
.lucky-element {
  color: var(--my-var);
}
.extra-lucky-element {
  @apply --my-mixin;
}
#+END_SRC

  You cannot overwrite root variables:

#+BEGIN_SRC css
:root {
  --not-overwritten-var: 1px;

  --mixin: {
    width: var(--not-overwritten-var);
  }
}
.test-element {
  /* you can't do this */
  --not-overwritten-var: 10px;

  /* this mixin gets 1px, not 10px */
  @apply --mixin;
}
#+END_SRC

** Nesting

*** Descendent
Use `&` to refer to parent block:

#+BEGIN_SRC css
  div {
    & > span {
      /* direct descendant */
      background: #eee;
    }
    & span {
      /* all within div */
      background: #bbb;
    }
    & ul {
      & span {
        /* this block's `&` refers to `ul`, not `div` */
        background: #999;
      }
    }
  }
#+END_SRC

*** Ascendent
#+BEGIN_SRC css
.deep-element {
  color: black;

  /* note both `@nest` and `&`
  @nest body.is-state & {
    color: red;
  }
}
#+END_SRC

** Media Queries

*** CSS

#+BEGIN_SRC css
  @media (min-width: 480px) {
    .box {
      padding: 20px;
    }
  }
#+END_SRC

*** CSS Modules

#+BEGIN_SRC css
@custom-media --xs-max (max-width: 479px);
@media (--xs-max) {}
@custom-media --sm (min-width: 480px);
@media (--sm) {}
@custom-media --sm-max (max-width: 767px);
@media (--sm-max) {}
@custom-media --md (min-width: 768px);
@media (--md) {}
@custom-media --md-max (max-width: 991px);
@media (--md-max) {}
@custom-media --lg (min-width: 992px);
@media (--lg) {}
@custom-media --xl (min-width: 1200px);
@media (--xl) {}
@custom-media --xxl (min-width: 1600px);
@media (--xxl) {}

@media (width >= 500px) and (width <= 1200px) {}

@custom-media --only-medium-screen (width >= 500px) and (width <= 1200px);
@media (--only-medium-screen) {}
#+END_SRC

*** LESS

**** Option 1

#+BEGIN_SRC css
@breakpointSmall: 480px;

.responsive(@minWidth; @rules) {
  @media only screen and (min-width: @minWidth) {
    @rules();
  }
}

.doodad {
  margin: 10px;

  .responsive(@breakpointSmall, {
    margin: 20px;
  });
}
#+END_SRC

**** Option 2

#+BEGIN_SRC css
@breakpointMedium: 992px;
@mediaMedium: ~"only screen and (min-device-width: @breakpointMedium)";

.doodad2 {
  padding: 5px;

  @media @mediaMedium {
    padding: 10px;
  }
}
#+END_SRC

**** full example

#+BEGIN_SRC css
@screenXS      : 480px;
@screenXSMax   : (@screenSM - 1);
@screenSM      : 768px;
@screenSMMax   : (@screenMD - 1);
@screenMD      : 992px;
@screenMDMmax  : (@screenLG - 1);
@screenLG      : 1200px;
@screenXL      : 1600px;

@xs:  ~"only screen and (min-width: @{screenXS})";
@sm:  ~"only screen and (min-width: @{screenSM})";
@md:  ~"only screen and (min-width: @{screenMD})";
@lg:  ~"only screen and (min-width: @{screenLG})";
@xl:  ~"only screen and (min-width: @{screenXL})";

@xs-max: ~"only screen and (max-width: @{screenXS})";
@sm-max: ~"only screen and (max-width: @{screenSM})";
@md-max: ~"only screen and (max-width: @{screenMD})";

.u-mobile-only {
  @media @md {
    display: none;
  }
}
.u-desktop-only {
  display: none;

  @media @md {
    display: block;
  }
}
#+END_SRC

Note: the tilde is for escaping/literal (<a href="http://lesscss.org/features/#features-overview-feature-escaping" target="_blank">reference</a>)


*** SASS

cf. mb

#+BEGIN_SRC css
/*

$screen-xs: 480px;
$screen-sm: 768px;
$screen-md: 992px;
$screen-lg: 1200px;
$screen-xl: 1400px;
$screen-xxl: 1600px;

$screen-xs-max: ($screen-sm - 1);
$screen-sm-max: ($screen-md - 1);
$screen-md-max: ($screen-lg - 1);

,*/

@mixin breakpoint-custom($breakpoint) {
  @media (min-width: #{$breakpoint}) {
    @content;
  }
}
@mixin breakpoint-max($breakpoint) {
  @media (max-width: #{$breakpoint}) {
    @content;
  }
}
@mixin breakpoint-range($min, $max) {
  @media (min-width: #{$min}) and (max-width: #{$max}) {
    @content;
  }
}

@mixin breakpoint-xs {
  @include breakpoint-custom($screen-xs) {
    @content;
  }
}
@mixin breakpoint-xs-max {
  @include breakpoint-max($screen-sm - 1) {
    @content;
  }
}
@mixin breakpoint-sm {
  @include breakpoint-custom($screen-sm) {
    @content;
  }
}

/* ... */

@mixin mobile-only() {
  @include breakpoint-md {
    display: none !important;
  }
}
@mixin desktop-only() {
  display: none;

  @include breakpoint-md {
    display: block;
  }
}

/* usage */

.my-el {
  width: 100%;

  @include breakpoint-md {
    width: 90%;
  }
  @include breakpoint-lg {
    width: 88%;
  }
}

#+END_SRC

*** Styled Components

cf. sunflowerseastar

#+BEGIN_SRC js
// Constants.js
export const Constants = {
  MQ: {
    xs: 420,
    sm: 768,
    md: 992,
    lg: 1200,
    xl: 1400,
    xxl: 1900,
  }
}

#+END_SRC

#+BEGIN_SRC js
// components/styled/index.js

export const Header = styled.header`
  padding: 10px;

  @media (min-width: ${Constants.MQ.sm}px) {
    padding: 15px;
  }
  @media (min-width: ${Constants.MQ.md}px) {
    padding: 20px;
  }
  @media (min-width: ${Constants.MQ.lg}px) {
    padding: 30px;
  }
`;
#+END_SRC


* Strategy
** Variables
*** Color
*** Type

Matt Stow's example, https://paulrobertlloyd.com/2017/03/designing_systems_part_3.

#+BEGIN_SRC scss
@mixin typeset($preset, $level) {
  @if ($preset == title) {
    font-family: $typeface-serif;
    font-weight: bold;
    letter-spacing: 0.0025em;
    text-transform: uppercase;

    @if ($level == 1) {
      font-size: 1em;
      line-height: 1.25em;
    }

    @if ($level == 2) {
      font-size: 2em;
      line-height: 2em;
    }

    ...
#+END_SRC

Usage:

#+BEGIN_SRC scss
.c-module__title {
  @include typeset(title, 2);
  margin-bottom: ($baseline * 4);
  padding-top: ($baseline * 2);
  color: $color-text;
}
#+END_SRC


* CSS Modules

[[https://github.com/css-modules/css-modules][github]]
[[https://github.com/css-modules/icss][Interoperable CSS (ICSS)]]

** Glen Maddern's intro
[[https://glenmaddern.com/articles/css-modules][Glen Maddern's introduction]]

Each class gets all the styles it needs...

#+BEGIN_SRC css
/* components/submit-button.css */
.normal { /* all styles for Normal */ }
.disabled { /* all styles for Disabled */ }
.error { /* all styles for Error */ }
.inProgress { /* all styles for In Progress */
#+END_SRC

...by composing:

#+BEGIN_SRC css
.common {
  /* all the common styles you want */
}
.normal {
  composes: common;
  /* anything that only applies to Normal */
}
.disabled {
  composes: common;
  /* anything that only applies to Disabled */
}
.error {
  composes: common;
  /* anything that only applies to Error */
}
.inProgress {
  composes: common;
  /* anything that only applies to In Progress */
}
#+END_SRC

*** Compose between files

#+BEGIN_SRC css
/* colors.css */
.primary {
  color: #720;
}
.secondary {
  color: #777;
}
/* other helper classes... */
#+END_SRC

*** More examples

#+BEGIN_SRC css
.element {
  composes: large from "./typography.css";
  composes: dark-text from "./colors.css";
  composes: padding-all-medium from "./layout.css";
  composes: subtle-shadow from "./effect.css";
}

/* this short hand: */
.element {
  composes: padding-large margin-small from "./layout.css";
}

/* is equivalent to: */
.element {
  composes: padding-large from "./layout.css";
  composes: margin-small from "./layout.css";
}

/* more examples ... */
.article {
  composes: flex vertical centered from "./layout.css";
}

.masthead {
  composes: serif bold 48pt centered from "./typography.css";
  composes: paragraph-margin-below from "./layout.css";
}

.body {
  composes: max720 paragraph-margin-below from "layout.css";
  composes: sans light paragraph-line-height from "./typography.css";
}
#+END_SRC

* postcss
** cssnext

*** Phenomic setup

Directory setup:

#+BEGIN_SRC
.
├── content
│   ├── assets
│   │   └── portfolio
│   ├── pages
│   └── ...
├── dist
├── scripts
└── src
    ├── components
    │   └── ...
    ├── layouts
    │   └── ...
    └── styles

./
package.json
postcss.config.js
variables.js
webpack.config.js

./src/styles/
headings.css
highlight.css
mixins.css
phenomic-base.css
reset.css
styles.global.css
#+END_SRC

#+BEGIN_SRC css
/* styles.global.css */
@import './reset.css';
@import './phenomic-base.css';

@import './mixins.css';
@import './headings.css';
@import './highlight.css';
#+END_SRC

#+BEGIN_SRC js
// postcss.config.js
const vars = require('./variables.js');

module.exports = (config) => [
    require("stylelint")(),
    require('postcss-import')(),
    require("postcss-cssnext")({
      // ref: http://cssnext.io/usage/
      browsers: "last 2 versions",
      features: {
        customProperties: {
          variables: vars,
        },
      },
    }),
    require("postcss-reporter")(),
    ...!config.production ? [
      require("postcss-browser-reporter")(),
    ] : [],
  ]
#+END_SRC

#+BEGIN_SRC js
// variables.js
module.exports = {
  myVar: 'orange',
}
#+END_SRC

*** links
 - [[http://cssnext.io/][cssnext home]]
 - [[http://ricostacruz.com/cheatsheets/cssnext.html][Rico St. Cruz's cheatsheet]]

** browserlist

[[https://css-tricks.com/browserlist-good-idea/][Chris Coyier's write-up]]

* Styled Components
** Example directly to a Styled Component

#+BEGIN_SRC js :cmd "org-babel-node"

// # - /App.js
import { OrangeSpan } from './styled/Button.js'
// ...
<div>
  <OrangeSpan/>
</div>

// # - /styled/Button.js
import React from 'react'
import styled from 'styled-components';

export const OrangeSpan = styled.span`
  background: orange;
`
#+END_SRC

** Example to an intermediate component inside styled/comp.js

#+BEGIN_SRC js :cmd "org-babel-node"

// # - /App.js
import { Button } from './styled/Button.js'
// ...
<div>
  <Button/>
</div>


// # - /styled/Button.js
import React from 'react'
import styled from 'styled-components';

const ButtonThatMovesPerOpen = styled.div`
  position: absolute;
  margin-left: ${(props) => (props.open) ? `${props.width}px` : 'none'};
  transition: margin .2s;
`
export const Button = (props) => {
  return (
    <ButtonThatMovesPerOpen {...props}>
      <span onClick={props.toggle}>button</span>
    </ButtonThatMovesPerOpen>
  )
}

#+END_SRC

* Glamor


* Easing

MDN easing: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions

Cubic bezier generator: http://cubic-bezier.com/#.3,.8,.83,.67

#+BEGIN_SRC scss
@mixin transition-s-curve($property: all, $duration: $transition-speed-default) {
    transition: $property $duration cubic-bezier(0.3, 0.8, 0.1, 0.95);
}

// ...

@include transition-s-curve(all, 1000ms);
#+END_SRC


* Misc

CSS Styles in the head ([MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style))

#+BEGIN_SRC css
<link href="styles/main.css" rel="stylesheet">

<style>
    body { display: none; }
</style>

<!-- optional [MIME] `type` attribute defauts to `text/css`, i.e. <style type="text/css" /> -->
#+END_SRC

Proper main-content line lengths, in em, [[http://maxdesign.com.au/articles/ideal-line-length-in-ems/][ref]]:

** color varibles

*** naming schemes

Example from Matt Stow, https://paulrobertlloyd.com/2017/03/designing_systems_part_3

#+BEGIN_SRC css
// Colour Palette
$color-brand--crimson: #c00;
$color-brand--mustard: #fc0;

$color-neutral--darkest: #222;
$color-neutral--darker: #444;
$color-neutral--dark: #666;
$color-neutral--mid: #888;
$color-neutral--light: #bbb;
$color-neutral--lighter: #ddd;
$color-neutral--lightest: #eee;
#+END_SRC

** blockquote

#+BEGIN_SRC html
<figure class="quote">
	<blockquote><p>...the author hopes to be held guiltless by those to whom the work is addressed—enlightened souls who prefer dry wines to sweet, sense to sentiment, wit to humor and clean English to slang.</p></blockquote>
	<figcaption>Ambrose Bierce, <cite>The Devil's Dictionary</cite></figcaption>
</figure>
#+END_SRC

** clearfix

#+BEGIN_SRC css
.clearfix:after {
  content: "";
  display: table;
  clear: both;
}
#+END_SRC
