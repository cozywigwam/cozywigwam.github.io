#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: no_export
#+BEGIN_EXAMPLE
---
title: "CSS"
layout: notation
description: The Weird Kid at the Party
path: "/css/"
---
#+END_EXAMPLE

* General
  :PROPERTIES:
  :CUSTOM_ID: general
  :END:

** Reference
   :PROPERTIES:
   :CUSTOM_ID: reference
   :END:

[[https://www.w3.org/Style/CSS/specs.en.html][CSS spec]]

** Custom Properties
   :PROPERTIES:
   :CUSTOM_ID: custom-properties
   :END:

*** Spec
    :PROPERTIES:
    :CUSTOM_ID: spec
    :END:

[[https://www.w3.org/TR/css-variables/][W3]]

*** Syntax Examples
    :PROPERTIES:
    :CUSTOM_ID: syntax-examples
    :END:

There are regular variables...:

#+BEGIN_SRC css
    :root {
      --site-red: #f00;
    }
    h1 {
      var(--site-red);
    }
#+END_SRC

...and mixin-esque custom properties:

#+BEGIN_SRC css
    :root {
      --an-argumentless-mixin: {
        color: red;
        border: 1px solid pink;
      }
    }
    .an-unargumentative-element {
      @apply --an-argumentless-mixin;
    }
#+END_SRC

These mixins might require the =Experimental Web Platform features= flag
in Chrome, found here:
=chrome://flags/#enable-experimental-web-platform-features=.

Here are both:

#+BEGIN_SRC css
    :root {
      --my-var: red;
      --my-mixin: {
        color: var(--my-var);
        background: #ccc;
      }
    }
    .lucky-element {
      color: var(--my-var);
    }
    .extra-lucky-element {
      @apply --my-mixin;
    }
#+END_SRC

Note that you cannot overwrite a root variable used by a mixin:

#+BEGIN_SRC css
    :root {
      --not-overwritten-var: 1px;
      --mixin: {
        width: var(--not-overwritten-var);
      }
    }
    .test-element {
      /* you can't do this */
      --not-overwritten-var: 10px;

      /* this mixin gets 1px, not 10px */
      @apply --mixin;
    }
#+END_SRC

*** Reference
    :PROPERTIES:
    :CUSTOM_ID: reference-1
    :END:

- [[https://twitter.com/malyw][Serg Hespodarets']]
  [[https://blog.hospodarets.com/css_properties_in_depth][custom props
  in depth]]
- [[https://blog.hospodarets.com/css_apply_rule][native CSS mixins]]
- [[https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/][Smashing
  Magazine]]

** Nesting
   :PROPERTIES:
   :CUSTOM_ID: nesting
   :END:

*** Descendent
    :PROPERTIES:
    :CUSTOM_ID: descendent
    :END:

Use =&= to refer to parent block:

#+BEGIN_SRC css
    div {
      & > span {
        /* direct descendant */
        background: #eee;
      }
      & span {
        /* all within div */
        background: #bbb;
      }
      & ul {
        & span {
          /* this block's `&` refers to `ul`, not `div` */
          background: #999;
        }
      }
    }
#+END_SRC

*** Ascendent
    :PROPERTIES:
    :CUSTOM_ID: ascendent
    :END:

#+BEGIN_SRC css
    .deep-element {
      color: black;

      /* note both `@nest` and `&` */
      @nest body.is-state & {
        color: red;
      }
    }
#+END_SRC

** Media Queries
   :PROPERTIES:
   :CUSTOM_ID: media-queries
   :END:

*** Top Level
    :PROPERTIES:
    :CUSTOM_ID: top-level
    :END:

#+BEGIN_SRC css
    @media (min-width: 480px) {
      .box {
        padding: 20px;
      }
    }

    @custom-media --xs-max (max-width: 479px);
    @media (--xs-max) {}
    @custom-media --sm (min-width: 480px);
    @media (--sm) {}
    @custom-media --sm-max (max-width: 767px);
    @media (--sm-max) {}
    @custom-media --md (min-width: 768px);
    @media (--md) {}
    @custom-media --md-max (max-width: 991px);
    @media (--md-max) {}
    @custom-media --lg (min-width: 992px);
    @media (--lg) {}
    @custom-media --xl (min-width: 1200px);
    @media (--xl) {}
    @custom-media --xxl (min-width: 1600px);
    @media (--xxl) {}

    @media (width >= 500px) and (width <= 1200px) {}

    @custom-media --only-medium-screen (width >= 500px) and (width <= 1200px);
    @media (--only-medium-screen) {}
#+END_SRC

* Transforms
  :PROPERTIES:
  :CUSTOM_ID: transforms
  :END:

Re SVG, it's their object bounding box that gets transformed.

* CSS Modules
  :PROPERTIES:
  :CUSTOM_ID: css-modules
  :END:

- [[https://github.com/css-modules/css-modules]]
- [[https://github.com/css-modules/icss][Interoperable CSS (ICSS)]]

** Glen Maddern's intro
   :PROPERTIES:
   :CUSTOM_ID: glen-madderns-intro
   :END:

[[https://glenmaddern.com/articles/css-modules][Glen Maddern's
introduction]]

Each class gets all the styles it needs...

#+BEGIN_SRC css
    /* components/submit-button.css */
    .normal { /* all styles for Normal */ }
    .disabled { /* all styles for Disabled */ }
    .error { /* all styles for Error */ }
    .inProgress { /* all styles for In Progress */ }
#+END_SRC

...by composing:

#+BEGIN_SRC css
    .common {
      /* all the common styles you want */
    }
    .normal {
      composes: common;
      /* anything that only applies to Normal */
    }
    .disabled {
      composes: common;
      /* anything that only applies to Disabled */
    }
    .error {
      composes: common;
      /* anything that only applies to Error */
    }
    .inProgress {
      composes: common;
      /* anything that only applies to In Progress */
    }
#+END_SRC

*** Compose between files
    :PROPERTIES:
    :CUSTOM_ID: compose-between-files
    :END:

#+BEGIN_SRC css
    /* colors.css */
    .primary {
      color: #720;
    }
    .secondary {
      color: #777;
    }
    /* other helper classes... */
#+END_SRC

*** More examples
    :PROPERTIES:
    :CUSTOM_ID: more-examples
    :END:

#+BEGIN_SRC css
    .element {
      composes: large from "./typography.css";
      composes: dark-text from "./colors.css";
      composes: padding-all-medium from "./layout.css";
      composes: subtle-shadow from "./effect.css";
    }

    /* this short hand: */
    .element {
      composes: padding-large margin-small from "./layout.css";
    }

    /* is equivalent to: */
    .element {
      composes: padding-large from "./layout.css";
      composes: margin-small from "./layout.css";
    }

    /* more examples ... */
    .article {
      composes: flex vertical centered from "./layout.css";
    }

    .masthead {
      composes: serif bold 48pt centered from "./typography.css";
      composes: paragraph-margin-below from "./layout.css";
    }

    .body {
      composes: max720 paragraph-margin-below from "layout.css";
      composes: sans light paragraph-line-height from "./typography.css";
    }
#+END_SRC

* postcss
  :PROPERTIES:
  :CUSTOM_ID: postcss
  :END:

** cssnext
   :PROPERTIES:
   :CUSTOM_ID: cssnext
   :END:

*** Phenomic setup
    :PROPERTIES:
    :CUSTOM_ID: phenomic-setup
    :END:

Directory setup (with the global styles file renamed and moved to
=styles/=):

#+BEGIN_EXAMPLE
    .
    ├── content
    │   ├── assets
    │   │   └── portfolio
    │   ├── pages
    │   └── ...
    ├── dist
    ├── scripts
    └── src
        ├── components
        │   └── ...
        ├── layouts
        │   └── ...
        └── styles

    ./
    package.json
    postcss.config.js
    variables.js
    webpack.config.js

    ./src/styles/
    headings.css
    highlight.css
    mixins.css
    phenomic-base.css
    reset.css
    styles.global.css

    /* styles.global.css */
    @import './reset.css';
    @import './phenomic-base.css';

    @import './mixins.css';
    @import './headings.css';
    @import './highlight.css';
#+END_EXAMPLE

In order to import these CSS files, add =require('postcss-import')(),=
to =postcss.config.js=:

#+BEGIN_SRC js
    // postcss.config.js
    const vars = require('./variables.js');

    module.exports = (config) => [
        require("stylelint")(),
        require('postcss-import')(),
        require("postcss-cssnext")({
          // ref: http://cssnext.io/usage/
          browsers: "last 2 versions",
          features: {
            customProperties: {
              variables: vars,
            },
          },
        }),
        require("postcss-reporter")(),
        ...!config.production ? [
          require("postcss-browser-reporter")(),
        ] : [],
      ]
#+END_SRC

Also note the external =variables.js= file:

#+BEGIN_SRC js
    // variables.js
    module.exports = {
      myVar: 'orange',
    }
#+END_SRC

*** Reference
    :PROPERTIES:
    :CUSTOM_ID: reference-2
    :END:

- [[http://cssnext.io/][cssnext home]]
- [[http://ricostacruz.com/cheatsheets/cssnext.html][Rico St. Cruz's
  cheatsheet]]

** browserlist
   :PROPERTIES:
   :CUSTOM_ID: browserlist
   :END:

[[https://css-tricks.com/browserlist-good-idea/][Chris Coyier's
write-up]]

* Styled Components
  :PROPERTIES:
  :CUSTOM_ID: styled-components
  :END:

** Example directly to a Styled Component
   :PROPERTIES:
   :CUSTOM_ID: example-directly-to-a-styled-component
   :END:

#+BEGIN_SRC js
    // /App.js
    import { OrangeSpan } from './styled/Button.js'
    // ...
    <div>
      <OrangeSpan/>
    </div>

    // /styled/Button.js
    import React from 'react'
    import styled from 'styled-components';

    export const OrangeSpan = styled.span`
      background: orange;
    `
#+END_SRC

** Example to an intermediate component inside styled/comp.js
   :PROPERTIES:
   :CUSTOM_ID: example-to-an-intermediate-component-inside-styledcomp.js
   :END:

#+BEGIN_SRC js
    // /App.js
    import { Button } from './styled/Button.js'
    // ...
    <div>
      <Button/>
    </div>


    // /styled/Button.js
    import React from 'react'
    import styled from 'styled-components';

    const ButtonThatMovesPerOpen = styled.div`
      position: absolute;
      margin-left: ${(props) => (props.open) ? `${props.width}px` : 'none'};
      transition: margin .2s;
    `
    export const Button = (props) => {
      return (
        <ButtonThatMovesPerOpen {...props}>
          <span onClick={props.toggle}>button</span>
        </ButtonThatMovesPerOpen>
      )
    }
#+END_SRC

* Misc
  :PROPERTIES:
  :CUSTOM_ID: misc
  :END:

#+BEGIN_SRC css
.why-is-this-hard-for-me-to-remember {
  white-space: nowrap;
}
#+END_SRC

## Styles in HTML

#+BEGIN_HTML
  <head>
#+END_HTML

CSS Styles in the head
[[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style][MDN]]

#+BEGIN_EXAMPLE
    <link href="styles/main.css" rel="stylesheet">

    <style>
        body { display: none; }
    </style>

    <!-- optional [MIME] `type` attribute defauts to `text/css`, i.e. <style type="text/css" /> -->
#+END_EXAMPLE

** Paragraph line width in em
   :PROPERTIES:
   :CUSTOM_ID: paragraph-line-width-in-em
   :END:

Proper main-content line lengths, in em,
[[http://maxdesign.com.au/articles/ideal-line-length-in-ems/][ref]]:

#+BEGIN_QUOTE
  As you can see, the average seems to suggest that your container width
  should be set between the narrowest width of 21em (approx 49
  characters per line) to the widest width of 30em (approx 71 characters
  per line).
#+END_QUOTE

** clearfix
   :PROPERTIES:
   :CUSTOM_ID: clearfix
   :END:

#+BEGIN_EXAMPLE
    .clearfix:after {
      content: "";
      display: table;
      clear: both;
    }
#+END_EXAMPLE

** text selection
   :PROPERTIES:
   :CUSTOM_ID: text-selection
   :END:

=::selection { ... }=
