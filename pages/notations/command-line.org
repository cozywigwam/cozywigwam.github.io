#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: no_export
#+BEGIN_EXAMPLE
---
title: "Command Line"
layout: notation
description: Shell, Term, Nix
path: "/command-line/"
---
#+END_EXAMPLE

* Builtins and Commands
  :PROPERTIES:
  :CUSTOM_ID: builtins-and-commands
  :END:

** ack
   :PROPERTIES:
   :CUSTOM_ID: ack
   :END:

[[https://raw.githubusercontent.com/cozywigwam/dotfiles/master/.ackrc][dotfile]]

#+BEGIN_SRC sh
    ack --help | less

    # ack [options] PATTERN [FILE...]
    # ack -f [options] [DIRECTORY...]

    ack --dump # see ignores

    ack -g ffmpeg /usr/local/ # files that match pattern (`-f` is all files searched)

    ack -i --ignore-dir=private --ignore-file="is:test.sql" findme
#+END_SRC

** ag
   :PROPERTIES:
   :CUSTOM_ID: ag
   :END:

To search =node_modules/= use =-a=. For absolutely everything (including
binaries/hidden), use =-u=. Use =-U= to disrepect =.gitignore=.

| =-a= =--all-files=               | doesn't respect ignore files; excludes hidden files, though   |
| =-c=                             | count                                                         |
| =-Cn=                            | context of =n= lines                                          |
| =-ignore=                        |                                                               |
| =-ignore-dir=                    |                                                               |
| =-l= =--files-with-matches=      | only print filenames, not full output                         |
| =-L= =--files-without-matches=   |                                                               |
| =-u= =--unrestricted=            | all files, everything, including binaries and hidden files    |
| =-U= =--skip-vcs-ignores=        | don't respect =.gitignore= (but still use =.agignore=)        |

** curl
   :PROPERTIES:
   :CUSTOM_ID: curl
   :END:

Flags =-c= & =-b=: cookie stuff

Flag =-d=, =--data <data>=: (HTTP) Sends the specified data in a POST
request to the HTTP server, in the same way that a browser does when a
user has filled in an HTML form and presses the submit button. This will
cause curl to pass the data to the server using the content-type
=application/x-www-form-urlencoded=. Compare to =-F=, =--form=.

** jobs
   :PROPERTIES:
   :CUSTOM_ID: jobs
   :END:

| =<C-z>=   | "suspend" character           |
| =<C-y>=   | "delayed suspend" character   |

#+BEGIN_SRC sh
    %1 # shorthand for `fg %1`
    %1 & # shorthand for `bg %1`
    jobs -l # show PID
#+END_SRC

** signals
   :PROPERTIES:
   :CUSTOM_ID: signals
   :END:

from [[http://linux.about.com/od/commands/l/blcmdl7_signal.htm][Linux
Signal command library]]

| Signal    | Value      | Action   | Comment                                      |
|-----------+------------+----------+----------------------------------------------|
| SIGINT    | 2          | Term     | Interrupt from keyboard                      |
| SIGQUIT   | 3          | Core     | Quit from keyboard                           |
| SIGILL    | 4          | Core     | Illegal Instruction                          |
| SIGABRT   | 6          | Core     | Abort signal from abort(3)                   |
| SIGFPE    | 8          | Core     | Floating point exception                     |
| SIGKILL   | 9          | Term     | Kill signal                                  |
| SIGSEGV   | 11         | Core     | Invalid memory reference                     |
| SIGPIPE   | 13         | Term     | Broken pipe: write to pipe with no readers   |
| SIGALRM   | 14         | Term     | Timer signal from alarm(2)                   |
| SIGTERM   | 15         | Term     | Termination signal                           |
| SIGUSR1   | 30,10,16   | Term     | User-defined signal 1                        |
| SIGUSR2   | 31,12,17   | Term     | User-defined signal 2                        |
| SIGCHLD   | 20,17,18   | Ign      | Child stopped or terminated                  |
| SIGCONT   | 19,18,25   |          | Continue if stopped                          |
| SIGSTOP   | 17,19,23   | Stop     | Stop process                                 |
| SIGTSTP   | 18,20,24   | Stop     | Stop typed at tty                            |
| SIGTTIN   | 21,21,26   | Stop     | tty input for background process             |
| SIGTTOU   | 22,22,27   | Stop     | tty output for background process            |

** less
   :PROPERTIES:
   :CUSTOM_ID: less
   :END:

| =M-u=   | toggle search highlighting (like =:noh=)   |

** lsof
   :PROPERTIES:
   :CUSTOM_ID: lsof
   :END:

#+BEGIN_SRC sh
    lsof -h

    lsof /dir/or/file

    # `-i [i]`: internet address matches [i]; default all
    lsof -i
    lsof -i | grep -Ei "(LISTEN|EXTENDED)"
    lsof -i :3000
    lsof -t -i :3000 # PID only

    lsof -c node # command
    lsof -u charadriidae # user

    kill -9 `lsof -t -u charadriidae`
#+END_SRC

** Misc
   :PROPERTIES:
   :CUSTOM_ID: misc
   :END:

#+BEGIN_SRC sh
    # dir tree
    tree -I node
    tree -d .

    # recent directories
    dirs -v

    # rename files ./old1.txt, ./old2.txt
    rename 's/old/new/g' *

    ytdl --extract-audio --audio-format mp3 <url>
#+END_SRC

*** macOS
    :PROPERTIES:
    :CUSTOM_ID: macos
    :END:

[[https://github.com/kevinSuttle/macOS-Defaults/blob/master/REFERENCE.md][macOS
Default Values Command Reference]]

#+BEGIN_SRC sh
    # sed requires `-i`
    sed -i '.bak' 's/oldterm/newterm/g' [filename]
    sed -i '' 's/oldterm/newterm/g' [filename] # no backup file

    # custom notification sounds for System Prefs -> Sounds
    cp my-custom-sound.mp3 ~/Library/Sounds/
#+END_SRC

* shells
  :PROPERTIES:
  :CUSTOM_ID: shells
  :END:

** zsh
   :PROPERTIES:
   :CUSTOM_ID: zsh
   :END:

[[https://github.com/cozywigwam/dotfiles/blob/master/.zshrc][dotfile]]

#+BEGIN_SRC sh
    man zsh
    man zshbuiltins
    man zshoptions

    # prompt, jobs, if/then
    man zshmisc

    # show (default non-vicmd/viins) zle key bindings
    bindkeys

    # setopt HIST_IGNORE_SPACE
#+END_SRC

*** ZLE
    :PROPERTIES:
    :CUSTOM_ID: zle
    :END:

#+BEGIN_QUOTE
  The =bindkey= command manipulates keymaps and key bindings
  ([[http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins][link]])
#+END_QUOTE

#+BEGIN_SRC sh
    man zsh
    man zshbuiltins
    man zshoptions

    # prompt, jobs, if/then
    man zshmisc

    zle -la # list widgets (aka commands)

    bindkey # show (default non-vicmd/viins) zle key bindings
    bindkey -M viins # just viins mode
    bindkey -M emacs '\e.' # just the <M-.> binding in emacs mode
    bindkey -rM emacs '\e.' # `-r` to remove binding

    # ref. http://www.zsh.org/mla/users/2009/msg00875.html
    bindkey -rM vicmd -- '-' # use `--` since `-` expects an option

    echo $fpath # zsh's function path
#+END_SRC

Use =\e= or =^[= to indicate Meta key.

Modes: =viins=, =vicmd=, =emacs=, others.

| =<M-x>=   | emacs & [mapped] viins: execute =execute-named-cmd=   |
| =:=       | vicmd: execute =execute-named-cmd=                    |

**** Reference
     :PROPERTIES:
     :CUSTOM_ID: reference
     :END:

[[http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor][ZLE]]

[[http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins][docs
- ZLE Builtins]]

[[https://chaseonline.chase.com/][Serge Gebhardt]] regarding
[[http://sgeb.io/posts/2014/04/zsh-zle-custom-widgets/][ZLE & creating
custom widgets]]

** emacs
   :PROPERTIES:
   :CUSTOM_ID: emacs
   :END:

*** term
    :PROPERTIES:
    :CUSTOM_ID: term
    :END:

| =C-c C-j=   | switch to line mode   |
| =C-c C-k=   | switch to char mode   |

*** eshell
    :PROPERTIES:
    :CUSTOM_ID: eshell
    :END:

| =C-p=, =C-n=           | previous/next input [custom]                                    |
| =M-p=, =M-n=           | previous/next match                                             |
| =C-c C-p=, =C-c C-n=   | previous/next prompt                                            |
| =C-u 0 C-l=            | recenter prompt to top with zero arg to =recenter-top-bottom=   |
| =C-u=                  | [insert mode] universal-argument                                |
| =f1 k=                 | [insert mode] =describe-key=                                    |
| =SPC b C-r=            | =rename-buffer=                                                 |

**** alias
     :PROPERTIES:
     :CUSTOM_ID: alias
     :END:

Emacs Wiki: https://www.emacswiki.org/emacs/EshellAlias

For the aliases file, see =eshell-aliases-file=:
=~/.emacs.d/eshell/alias=

#+BEGIN_SRC sh
    alias customls 'ls -la $*'
    which customls # see it
#+END_SRC

**** reference
     :PROPERTIES:
     :CUSTOM_ID: reference-1
     :END:

Mickey Peterson's
[[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering
Eshell]]

*** man/woman
    :PROPERTIES:
    :CUSTOM_ID: manwoman
    :END:

| =(customize-group 'man)=   |    |

* path

#+BEGIN_SRC shell

[[https://superuser.com/a/753948/450439][SO answer]]

# from https://superuser.com/a/753948/450439
pathappend() {
    for ARG in "$@"
    do
        if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
            PATH="${PATH:+"$PATH:"}$ARG"
        fi
    done
}
pathprepend() {
    for ARG in "$@"
    do
        if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
            PATH="$ARG${PATH:+":$PATH"}"
        fi
    done
}

pathappend $HOME/local/bin /usr/local/bin /opt/local/bin /opt/local/sbin
#+END_SRC

* startup

From [[https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/][The Lumber Room]] post

|                  | int. login | int. non-login | script |
|------------------+------------+----------------+--------|
| /etc/profile     | A          |                |        |
| /etc/bash.bashrc |            | A              |        |
| ~/.bashrc        |            | B              |        |
| ~/.bash_profile  | B1         |                |        |
| ~/.bash_login    | B2         |                |        |
| ~/.profile       | B3         |                |        |
| BASH_ENV         |            |                | A      |
| ~/.bash_logout   | C          |                |        |

|               | int. login | int. non-login | script |
|---------------+------------+----------------+--------|
| /etc/zshenv   | A          | A              | A      |
| ~/.zshenv     | B          | B              | B      |
| /etc/zprofile | C          |                |        |
| ~/.zprofile   | D          |                |        |
| /etc/zshrc    | E          | C              |        |
| ~/.zshrc      | F          | D              |        |
| /etc/zlogin   | G          |                |        |
| ~/.zlogin     | H          |                |        |
| ~/.zlogout    | I          |                |        |
| /etc/zlogout  | J          |                |        |

* Scripting
  :PROPERTIES:
  :CUSTOM_ID: scripting
  :END:

** Write each line to stdout

#+BEGIN_SRC sh
    #! /bin/bash

    FILE=$1

    while read -ru 3 LINE; do
        echo "$LINE"
    done 3< "$FILE"
#+END_SRC

** Write each line to another file

#+BEGIN_SRC sh
    #! /bin/bash

    FILE=$1
    ANOTHER_FILE=$2

    exec 4> "$ANOTHER_FILE"

    while read -ru 3 LINE; do
        echo "$LINE" >&4
    done 3< "$FILE"
#+END_SRC
