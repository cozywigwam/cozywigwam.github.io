#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: noexport
#+BEGIN_EXAMPLE
---
title: "Org"
layout: notation
description: Slouching  Toward Bablyon
path: "/org/"
---
#+END_EXAMPLE

* Babel

* Capture Templates

[[https://www.youtube.com/watch?v=KdcXu_RdKI0][How I Use org-capture and Stuff]] on YouTube, by [[https://twitter.com/yonkeltron?lang=en][Jonathan Magen]]

| ~%U~       | inactive timestamp                                             |
| ~%^{Name}~ | prompt/read                                                    |
| ~%a~       | annotation ~org-store-link~ (takes you back to where you were) |
| ~%i~       | active region                                                  |
| ~%?~       | final cursor position                                          |

~org-protocol-capture-html~ on [[https://github.com/alphapapa/org-protocol-capture-html][github]]

#+BEGIN_QUOTE
With this, you can capture HTML content directly into Org, converted into Org syntax with Pandoc.

For example, to capture your comment into Org, I just highlight it in Pentadactyl (Firefox), press "cc", and Emacs pops up a capture buffer with your comment inserted into the capture template. Or if I press "ch", it passes it through Pandoc, converting HTML lists, tables, headings, code blocks, etc. into their Org counterparts.

I also just added support for python-readability, so if I press "cr", the URL of the page is sent to python-readability, which gets the article content (just like the good ol' Readability bookmarklet), then passes it through Pandoc, and then places it into the capture template.
#+END_QUOTE

* Code blocks/babel

[[http://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code][manual 14 Working with source code]]

| ~C-c C-c~   | ~org-ctrl-c-ctrl-c~                  | evaluate                                             |
| ~C-c '~     | ~org-edit-special~                   | open sub-editing buffer                              |
| ~M-RET c~   | ~org-edit-src-exit~                  | close sub-editing buffer and return to source buffer |
| ~SPC t C-c~ | ~my-toggle-org-babel-no-eval-ctrl-c~ | [custom] toggle no-eval/ctrl-c-ctrl-c on/off         |

** code execution/ctrl-c-ctrl-c

*** setup

~my-toggle-org-babel-no-eval-ctrl-c~ evaluation controls ~org-confirm-babel-evaluate~ and ~org-babel-no-eval-on-ctrl-c-ctrl-c~.

#+BEGIN_SRC emacs-lisp
(defun my-toggle-org-babel-no-eval-ctrl-c()
  (interactive)
  (if (eq org-babel-no-eval-on-ctrl-c-ctrl-c nil)
      (setq org-babel-no-eval-on-ctrl-c-ctrl-c 't)
      (setq org-babel-no-eval-on-ctrl-c-ctrl-c nil)))

(spacemacs/set-leader-keys "t C-c" 'my-toggle-org-babel-no-eval-ctrl-c)
#+END_SRC

In order to ~ctrl-c-ctrl-c~ (execute) a code block, it needs to be in ~org-babel-load-languages~:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (js . t)
     (shell . t)))
#+END_SRC

Change how ~ctrl-c-ctrl-c~ windows behave:

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

*** reference

- [[https://org-babel.readthedocs.io/en/latest/eval/][org-babel.readthedocs.io]]
- [[http://orgmode.org/manual/Code-block-specific-header-arguments.html#Code-block-specific-header-arguments][header arguments for code blocks]]

*** Results variables

[[http://orgmode.org/manual/results.html][manual 14.8.2.2 :results]]

#+BEGIN_SRC shell :results value code
curl 127.0.0.1 --head
#+END_SRC

** node

- ~setenv "NODE_PATH"~ specifically to ~/org/node_modules~
- install babel presets to ~/org~
- symlink ~/org/node_modules/babel-cli/bin/babel-node.js~ as ~org-babel-node~ to path

reference [[http://rwx.io/blog/2016/03/09/org-with-babel-node-updated/][Org Mode ES2015+ Code Blocks (updated)]], by [[https://twitter.com/rwxstar][Patrick Goddi]]

#+BEGIN_SRC js :cmd "org-babel-node --presets=stage-2"
let obj = {
  fruit: "apple",
  veggie: "kale",
  meat: "tofu"
}

let { fruit, ...restItem } = obj;

console.log(fruit);
console.log(restItem);
#+END_SRC

* Export

[[http://orgmode.org/manual/Easy-templates.html#Easy-templates][Easy Templates]]


| ~C-c C-e #~          | insert default export options from template |
| ~#+OPTIONS: toc:nil~ | don't export table of contents              |

To prevent exporting a node use an ~#+EXCLUDE_TAGS~ option of ~no_export~, and add ~:no_export:~ after the heading/node.

** export exclusion example :noexport:

This section is not exported.

** export options & settings

- [[http://orgmode.org/manual/Export-settings.html#Export-settings][manual 12.2 Export settings]]
- [[https://emacsclub.github.io/html/org_tutorial.html#sec-8][Org Tutorial Exporting]]

|                      |
|----------------------|
| ~‘AUTHOR’~           |
| ~‘CREATOR’~          |
| ~‘DATE’~             |
| ~‘EMAIL’~            |
| ~‘LANGUAGE’~         |
| ~‘SELECT_TAGS’~      |
| ~‘EXCLUDE_TAGS’~     |
| ~‘TITLE’~            |
| ~‘EXPORT_FILE_NAME’~ |

#+BEGIN_QUOTE
The ~#+OPTIONS~ keyword is a compact form. To configure multiple options, use several ~#+OPTIONS~ lines. ~#+OPTIONS~ recognizes the following arguments.
#+END_QUOTE

|                 |
|-----------------|
| ~*:~            |
| ~-:~            |
| ~::~            |
| ~<:~            |
| ~\n:~           |
| ~^:~            |
| ~arch:~         |
| ~author:~       |
| ~broken-links:~ |
| ~c:~            |
| ~creator:~      |
| ~d:~            |
| ~date:~         |
| ~e:~            |
| ~email:~        |
| ~f:~            |
| ~H:~            |
| ~inline:~       |
| ~num:~          |
| ~p:~            |
| ~pri:~          |
| ~prop:~         |
| ~stat:~         |
| ~tags:~         |
| ~tasks:~        |
| ~tex:~          |
| ~timestamp:~    |
| ~title:~        |
| ~toc:~          |
| ~todo:~         |
| ~\vert:~            |

** links

- [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][WORG publishing org-mode -> HTML]]
- [[http://orgmode.org/worg/org-tutorials/org-jekyll.html][WORG org -> jekyll]]
- [[https://emacsclub.github.io/html/org_tutorial.html][cheatsheet]]
- [[http://gongzhitaao.org/orgcss/][CSS for Org-exported HTML example/walkthrough]]

** "publishing projects" examples

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)
(setq org-publish-project-alist
      '(

        ("org-notes"
         :base-directory "~/scratch/org-test/org/"
         :base-extension "org"
         :publishing-directory "~/scratch/org-test/public_html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t
         )


        ("org-static"
         :base-directory "~/scratch/org-test/org/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/scratch/org-test/public_html/"
         :recursive t
         :publishing-function org-publish-attachment
         )

        ("org" :components ("org-notes" "org-static"))

        ))
#+END_SRC

* Keys/misc, quick ref, hard to remember

[[info:org#Specific%20header%20arguments][info:org#Specific header arguments]]

|                              |                                                               |                                                                        |
|------------------------------+---------------------------------------------------------------+------------------------------------------------------------------------|
| ~C-z~                        | ~evil-emacs-state~                                            |                                                                        |
| ~SPC m ^~                    | ~org-sort~                                                    | alphabetize org headings                                               |
| ~C-c C-l~                    | ~org-insert-link~                                             | insert link                                                            |
| ~C-c .~                      | ~org-time-stamp~                                              | insert stamp                                                           |
| ~< s~ + ~<tab>~              | [snippet] expands ~#+BEGIN_SRC~ ... ~#+END_SRC~ ('s' for src) |                                                                        |
| ~C-c C-o~                    | ~org-open-at-point~                                           | open at point                                                          |
| ~SPC x o~                    | ~link-hint-open-link~                                         | open link                                                              |
| ~org-version~                | version                                                       |                                                                        |
| ~<S-tab>~                    | cycle all                                                     |                                                                        |
| ~C-c C-p~ & ~C-c C-n~        | prev/next headline                                            |                                                                        |
| ~C-c C-f~ & ~C-c C-b~        | prev/next same-level headline                                 |                                                                        |
| ~C-c C-u~                    | up level                                                      |                                                                        |
| ~M-h~, ~M-l~                 | ~org-metaright~, like ~<M-right>~                             |                                                                        |
| ~M-<ret>~                    | new headline or list elements                                 |                                                                        |
| ~C-<ret>~                    | new same-level headline below current headline group          |                                                                        |
| ~M-<up>~ & ~M-<down>~        | move subtree or list element                                  |                                                                        |
| ~M-<left>~ & ~M-<right>~     | promote/demote heading or list element                        |                                                                        |
| ~M-S-<left>~ & ~M-S-<right>~ | promote/demote heading or list element                        |                                                                        |
| ~: [[http://example.com][ex]]~                       | use ~:~ at ^ to preserve no-formatting                        |                                                                        |
| ~C-c -~                      | ~org-ctrl-c-minus~                                            | rotate list state (~org-cycle-list-bullet~) or other, context-senstive |

** links

[[info:org#Handling%20links][info:org#Handling links]]

| ~C-c l~       | ~SPC a o l~ | ~org-store-link~    |
| ~C-c C-l~     | ~SPC m i l~ | ~org-insert-link~   |
| ~C-c C-o~     | ~SPC m l~   | ~org-open-at-point~ |
| ~C-c C-x C-n~ |             | ~org-next-link~     |
| ~C-c C-x C-p~ |             | ~org-previous-link~ |

* Local variables

# -*- org-use-tag-inheritance: nil; -*-

#+BEGIN_EXAMPLE
# local variables:
:# org-attach-directory: "./data"
:# org-id-method: uuid
# end:
#+END_EXAMPLE

* My Project Setup :noexport:

** Example Tree

This is a sample project code root. It excludes possible additional directories like config and scripts, and is showing files in _org:

#+BEGIN_SRC shell
.
├── _org
│   ├── [project-name].org
│   ├── notes.org
│   ├── scratch.js
│   ├── sitemap.org
├── _reference
├── client/src
│   ├── ...
└── public/dist
    └── ...
#+END_SRC

*** [project-name].org

This contains TODOs. If they should be tracked in the global agenda, then they need to be added to org-agenda-files:

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/org/work.org"
                               "~/org/[project-name-1].org"
                               "~/org/[project-name-2].org"
                               "~/org/todo.org"))
#+END_SRC

I symlink this particular file to ~/org/ for easy access, but that's just me.

*** notes.org

When I research something, I'm trying to either learn it or just figure it out to get something done. If it's something that's general or applicable to all of my other projects, I'll try to record the salient bits in the SFSS notations. If it's project-specific, or something I want handy and close by, I'll put it in notes.org.

*** sitemap.org

This is optional. Sometimes I write out the sitemap by hand and manually update it as changes occur in order to keep track of what's what, and keep the page names/sections top of mind. In Sunflower Sea Star's case, however, it doesn't make sense to do that for two reasons: one is that since everything roughly a 1-to-1 flat file setup, I can just look at the files in the directory to see what pages are there. Then again, this could be automated and exported, hmmm:

#+BEGIN_SRC shell
echo '-one-off-pages:\n'
echo 'home'
echo 'about\n'
echo '-notations:\n'
ls
#+END_SRC

#+RESULTS:
| -one-off-pages: |
|                 |
| home            |
| about           |
|                 |
| -notations:     |
|                 |
| browsers.md     |
| command-line.md |
| emacs.org       |
| git.md          |
| markdown.md     |
| org.org         |
| server-setup.md |
| system.md       |
| tmux.md         |
| type.md         |
| vim.md          |

* Spreadsheets

- [[http://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html][Org as Spreadsheet introduction]]
- [[https://emacs.stackexchange.com/a/20506/15295][Helpful Emacs Stack Exchange answer]]
- [[http://orgmode.org/manual/Formula-syntax-for-Calc.html#Formula-syntax-for-Calc][Formula Syntax for Calc]]

#+BEGIN_SRC org
:=vsum($2..$3) ;; do a calculation
:=vsum($2..$3);%.2f ;; set format to 2 decimal places
#+END_SRC

| ~C-c ?~           | ~org-table-field-info~                 |                                                |
| ~C-c }~           | ~org-table-toggle-coordinate-overlays~ | show row & column numbers                      |
| ~C-c {~           |                                        | toggle debugging                               |
| ~C-c C-c~         |                                        | "run" at point                                 |
| ~C-c u C-c *~     |                                        | re-calc table                                  |
| ~C-u C-c *~       |                                        | reapply formulas                               |
| ~:=vmean($2..$3)~ |                                        | row formula, mean of columns 2 & 3             |
| ~=vsum($2..$3)~   |                                        | column formula, sum of all rows' columns 2 & 3 |

| ~::~    | separate formulas                                |
| ~$x~    | column number x                                  |
| ~@x~    | row number x                                     |
| ~@#~    | current row                                      |
| ~$#~    | current column                                   |
| ~@>~    | last row                                         |
| ~x..y~  | range between x and y (top-left to bottom-right) |
| ~vsum~  | vector sum                                       |
| ~vmean~ | average                                          |

* Syntax

- [[http://orgmode.org/org.html#Markup][manual 11 Markup for rich export]]
- [[http://orgmode.org/manual/Emphasis-and-monospace.html][manual 11.2 Emphasis and monospace]]

#+BEGIN_SRC org
[[https://example.com][link example]]

*bold*, /italic/, _underline_, =verbatim=, ~code~, +strike-through+
#+END_SRC

* Tables

|               |                       |
|---------------+-----------------------|
| ~SPC m t d c~ | ~table-delete-column~ |

* Tangle

[[info:org#Extracting%20source%20code][info:org#Extracting source code]]

| ~C-c C-v t~ | ~org-babel-tangle~ |

** tangled example :noexport:

#+BEGIN_SRC js :tangle yes
console.log('will be tangled');
#+END_SRC

** tangle all files in a directory

[[https://emacs.stackexchange.com/a/20733/15295][Emacs Stack Exchange answer]]

#+BEGIN_SRC emacs-lisp
(defun my/tangle-dotfiles ()
  "If the current file is in '~/.dotfiles', the code blocks are tangled"
  (when (equal (file-name-directory (directory-file-name buffer-file-name))
               (concat (getenv "HOME") "/.dotfiles/"))
    (org-babel-tangle)
    (message "%s tangled" buffer-file-name)))

(add-hook 'after-save-hook #'my/tangle-dotfiles)
#+END_SRC

** Reference

[[https://twitter.com/fredgiasson][Frederick Giasson]]'s blog post [[http://fgiasson.com/blog/index.php/2016/10/26/literate-clojure-programming-tangle-all-in-org-mode/][Literate {Clojure} Programming: Tangle All in Org-mode]]

* Todos

| ~S-M-<ret>~                    | new TODO                |
| ~C-c C-t~ & ~S-<right>/<left>~ | rotate/cycle TODO state |

** Customize TODOs                                                 :noexport:

[[http://orgmode.org/manual/Faces-for-TODO-keywords.html][manual 5.2.6 Faces for TODO keywords]]

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
(setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE"))) ;; http://orgmode.org/manual/TODO-types.html#TODO-types
(setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "DONE" "DELEGATED")))

(setq org-todo-keyword-faces
      '(("TODO" . org-warning)
        ("IN-PROGRESS" . "yellow")
        ("DONE" . (:foreground "blue" :weight bold))))
(setq org-todo-keyword-faces
      '(("TODO" . org-warning) ("STARTED" . "yellow")
        ("CANCELED" . (:foreground "blue" :weight bold))))
#+END_SRC

* Misc

- [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]

** Visibility/folds/exansion

Control visibility on startup:

#+BEGIN_EXAMPLE
#+STARTUP: showeverything
#+END_EXAMPLE

or

#+BEGIN_SRC emacs-lisp
(setq org-startup-folded nil)
#+END_SRC

** Pipe character in tables

Use ~\vert~. See [[http://orgmode.org/manual/Special-symbols.html#Special-symbols][manual 11.6 Special symbols]]. Use ~C-c C-x \~ (~org-toggle-pretty-entities~) to toggle display.
