#+OPTIONS: toc:nil -:nil H:6 ^:nil
#+EXCLUDE_TAGS: noexport
#+BEGIN_EXAMPLE
---
title: "Command Line"
layout: notation
description: "[promptus] $"
path: "/command-line/"
---
#+END_EXAMPLE

* builtins

** dirs

recent directories

#+BEGIN_SRC sh
dirs -v
#+END_SRC

** jobs

| =<C-z>=   | "suspend" character           |
| =<C-y>=   | "delayed suspend" character   |

#+BEGIN_SRC sh
%1 # shorthand for `fg %1`
%1 & # shorthand for `bg %1`
jobs -l # show PID
#+END_SRC

* signals

reference [[http://linux.about.com/od/commands/l/blcmdl7_signal.htm][Linux "standard signals"]]

| Signal    | Value      | Action   | Comment                                      |
|-----------+------------+----------+----------------------------------------------|
| SIGINT    | 2          | Term     | Interrupt from keyboard                      |
| SIGQUIT   | 3          | Core     | Quit from keyboard                           |
| SIGILL    | 4          | Core     | Illegal Instruction                          |
| SIGABRT   | 6          | Core     | Abort signal from abort(3)                   |
| SIGFPE    | 8          | Core     | Floating point exception                     |
| SIGKILL   | 9          | Term     | Kill signal                                  |
| SIGSEGV   | 11         | Core     | Invalid memory reference                     |
| SIGPIPE   | 13         | Term     | Broken pipe: write to pipe with no readers   |
| SIGALRM   | 14         | Term     | Timer signal from alarm(2)                   |
| SIGTERM   | 15         | Term     | Termination signal                           |
| SIGUSR1   | 30,10,16   | Term     | User-defined signal 1                        |
| SIGUSR2   | 31,12,17   | Term     | User-defined signal 2                        |
| SIGCHLD   | 20,17,18   | Ign      | Child stopped or terminated                  |
| SIGCONT   | 19,18,25   |          | Continue if stopped                          |
| SIGSTOP   | 17,19,23   | Stop     | Stop process                                 |
| SIGTSTP   | 18,20,24   | Stop     | Stop typed at tty                            |
| SIGTTIN   | 21,21,26   | Stop     | tty input for background process             |
| SIGTTOU   | 22,22,27   | Stop     | tty output for background process            |

* shells
** zsh

[[https://github.com/cozywigwam/dotfiles/blob/master/.zshrc][dotfile]]

#+BEGIN_SRC sh
    man zsh
    man zshbuiltins
    man zshoptions

    # prompt, jobs, if/then
    man zshmisc

    # show (default non-vicmd/viins) zle key bindings
    bindkeys

    # setopt HIST_IGNORE_SPACE
#+END_SRC

*** ZLE

#+BEGIN_QUOTE
  The =bindkey= command manipulates keymaps and key bindings
  ([[http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins][link]])
#+END_QUOTE

#+BEGIN_SRC sh
    man zsh
    man zshbuiltins
    man zshoptions

    # prompt, jobs, if/then
    man zshmisc

    zle -la # list widgets (aka commands)

    bindkey # show (default non-vicmd/viins) zle key bindings
    bindkey -M viins # just viins mode
    bindkey -M emacs '\e.' # just the <M-.> binding in emacs mode
    bindkey -rM emacs '\e.' # `-r` to remove binding

    # ref. http://www.zsh.org/mla/users/2009/msg00875.html
    bindkey -rM vicmd -- '-' # use `--` since `-` expects an option

    echo $fpath # zsh's function path
#+END_SRC

Use =\e= or =^[= to indicate Meta key.

Modes: =viins=, =vicmd=, =emacs=, others.

| =<M-x>=   | emacs & [mapped] viins: execute =execute-named-cmd=   |
| =:=       | vicmd: execute =execute-named-cmd=                    |

**** Reference

[[http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor][ZLE]]

[[http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins][docs
- ZLE Builtins]]

[[https://chaseonline.chase.com/][Serge Gebhardt]] regarding
[[http://sgeb.io/posts/2014/04/zsh-zle-custom-widgets/][ZLE & creating
custom widgets]]

** emacs

*** term

| =C-c C-j=   | switch to line mode   |
| =C-c C-k=   | switch to char mode   |

*** eshell

| =C-p=, =C-n=           | previous/next input [custom]                                    |
| =M-p=, =M-n=           | previous/next match                                             |
| =C-c C-p=, =C-c C-n=   | previous/next prompt                                            |
| =C-u 0 C-l=            | recenter prompt to top with zero arg to =recenter-top-bottom=   |
| =C-u=                  | [insert mode] universal-argument                                |
| =f1 k=                 | [insert mode] =describe-key=                                    |
| =SPC b C-r=            | =rename-buffer=                                                 |

**** alias

Emacs Wiki: https://www.emacswiki.org/emacs/EshellAlias

For the aliases file, see =eshell-aliases-file=: =~/.emacs.d/eshell/alias=. Refresh alias file with =eshell-read-aliases-list=.

#+BEGIN_SRC sh
    alias customls 'ls -la $*'
    which customls # see it
#+END_SRC

**** reference

Mickey Peterson's
[[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering
Eshell]]

*** man/woman

| =(customize-group 'man)=   |    |

* path

#+BEGIN_SRC shell

[[https://superuser.com/a/753948/450439][SO answer]]

# from https://superuser.com/a/753948/450439
pathappend() {
    for ARG in "$@"
    do
        if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
            PATH="${PATH:+"$PATH:"}$ARG"
        fi
    done
}
pathprepend() {
    for ARG in "$@"
    do
        if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
            PATH="$ARG${PATH:+":$PATH"}"
        fi
    done
}

pathappend $HOME/local/bin /usr/local/bin /opt/local/bin /opt/local/sbin
#+END_SRC

* startup

From [[https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/][The Lumber Room]] post

|                  | int. login | int. non-login | script |
|------------------+------------+----------------+--------|
| /etc/profile     | A          |                |        |
| /etc/bash.bashrc |            | A              |        |
| ~/.bashrc        |            | B              |        |
| ~/.bash_profile  | B1         |                |        |
| ~/.bash_login    | B2         |                |        |
| ~/.profile       | B3         |                |        |
| BASH_ENV         |            |                | A      |
| ~/.bash_logout   | C          |                |        |

|               | int. login | int. non-login | script |
|---------------+------------+----------------+--------|
| /etc/zshenv   | A          | A              | A      |
| ~/.zshenv     | B          | B              | B      |
| /etc/zprofile | C          |                |        |
| ~/.zprofile   | D          |                |        |
| /etc/zshrc    | E          | C              |        |
| ~/.zshrc      | F          | D              |        |
| /etc/zlogin   | G          |                |        |
| ~/.zlogin     | H          |                |        |
| ~/.zlogout    | I          |                |        |
| /etc/zlogout  | J          |                |        |

* scripting

** Write each line to stdout

#+BEGIN_SRC sh
    #! /bin/bash

    FILE=$1

    while read -ru 3 LINE; do
        echo "$LINE"
    done 3< "$FILE"
#+END_SRC

** Write each line to another file

#+BEGIN_SRC sh
    #! /bin/bash

    FILE=$1
    ANOTHER_FILE=$2

    exec 4> "$ANOTHER_FILE"

    while read -ru 3 LINE; do
        echo "$LINE" >&4
    done 3< "$FILE"
#+END_SRC

* tmux

[[https://github.com/cozywigwam/dotfiles/blob/master/.tmux.conf][dotfile]]

** Bindings

~man tmux~

Keys are bound to either a key table or a mode table. Usage =[-t mode-table] [-T key-table]=. The two key tables:

- =prefix=
- =root=

The mode tables:

- =emacs-choice=
- =emacs-copy=
- =emacs-edit=
- =vim-choice=
- =vim-copy=
- =vim-edit=

| =list-commands / lscm=        | list all commands                               |
| =list-keys / lsk / <leader>?= | list all bound keys (default table is "prefix") |

#+BEGIN_SRC sh
# list prefix & root key table bindings
tmux list-keys # equivalent to '-T prefix' + '-T root'

# list vi-copy mode table bindings
tmux lsk -t vi-copy

# bind the "v" key in vi-copy mode
tmux bind-key -t vi-copy v begin-selection # old syntax
tmux bind-key -T copy-mode-vi v send -X begin-selection # new syntax

# allow a key to [-r] repeat
bind-key -r L swap-window -t +1

unbind C-n # unbind one thing
unbind-key -a # unbind everything*
tmux -f /dev/null -L temp start-server \; list-keys # start tmux with default keys
#+END_SRC

ref [[https://unix.stackexchange.com/questions/57641/reload-of-tmux-config-not-unbinding-keys-bind-key-is-cumulative][Unix & Linux Stack Exchange answer regarding unbinding]]

** Options

Respectively, see and set:

#+BEGIN_SRC sh
# server
tmux show-options -s # tmux show -s
tmux set-option -s # tmux set -s

# session
tmux show -g # -g for global session/window settings
tmux set

# window
tmux showw (alias for `show-window-options`)
tmux setw
#+END_SRC

** Plugins

[[https://github.com/tmux-plugins/tpm][Tmux Plugin Manager]]

Plugins live in =~/.tmux/plugins=. Install with with =[prefix] + I=.
Update with =~/.tmux/plugins/tpm/bin/update_plugins all=.

** Misc

Hold =‚å•= when click + dragging mouse to enable selection/copying to
macOS clipboard.

| =[session][:window][.pane]=     | target syntax                                                 |
| =<leader>z=                     | zoom                                                          |
| =<leader>q=                     | display pane numbers                                          |
| =<leader>{= & =<leader>}=       | swap (move) panes                                             |
| =attach-session -c ~/new-dir=   | change current working-directory                              |
| =<leader> m-4=                  | [custom] =select-layout even-vertical=                        |
| =<leader> m-5=                  | [custom] =select-layout even-horizontal= (like Vim =C-w ==)   |
** tree

dir tree

#+BEGIN_SRC sh
tree -I node
tree -d .
#+END_SRC

** ytdl

#+BEGIN_SRC sh
ytdl --extract-audio --audio-format mp3 <url>
#+END_SRC
