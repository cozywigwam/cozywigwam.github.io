---
layout: post
title: "Emacs"
categories: notation
subtitle: Er, Spacemacs
---

* get around
** quick reference/favorites/main
*** misc/hard to remember
Layouts <-> Perspectives <-> iTerm2 tabs
Workspaces <-> Eyebrowse <-> tmux windows or vim tabs

| `amen`              | escape holy-mode                         |
| `set-initial-state` | gimme normal, not iedt                   |
| 'F5'                | [in helm locate] open dired              |
| `C-x M-:`           | `repeat-complex-command`                 |
| `SPC v`             | `er-expand-region`                       |
| `C-M-SPC`           | `mark-sexp`                              |
| `C-p`               | `evil-paste-pop`                         |
| -                   | `evil-set-initial-state`                 |
| `SPC e r`           | `evil-show-registers`                    |
| `SPC m g h`         | `helm-css-scss`                          |
| `C-S-o`             | [in dired] (custom) open in external app |
| `SPC b e`           | delete full buffer contents              |
| `SPC w u`           | `winner-undo`                            |
| `C-x C-b`           | (in helm) resume different helm buffer   |
| `SPC h d m`         | `spacemacs/describe-mode`                |
| `C-c >`, `C-c <`    | [in helm] next/prev file                 |

*** buffers/files

| `SPC p h` | `helm-projectile`                                   | recent, buffers, files          |
| `SPC f r` | `helm-recentf`                                      | recent files                    |
| `SPC p r` | `helm-projectile-recentf`                           | project recent files            |
| `SPC p b` | `helm-projectile-switch-to-buffer`                  | project buffers                 |
| `SPC B b` | `spacemacs-layouts/non-restricted-buffer-list-helm` | global buffers                  |
| `SPC f j` | `dired-jump`                                        | dired to file                   |
| `SPC p p` | `helm-projectile/switch-project`                    | projects                        |
| `SPC p F` | `helm-projectile-find-file-dwim`                    | find file with dwim             |
| `SPC f L` | `helm-locate`                                       | like `find ~ -type f -name [x]` |
| `SPC /`   | `spacemacs/helm-project-smart-do-search`            | ag from project root            |
| `SPC s f` | `spacemacs/helm-files-smart-do-search`              | ag from current/aribtrary dir   |
| `SPC f D` | `spacemacs/delete-current-buffer-file`              | delete current buffer           |

*** get to dired

`SPC f j` | `dired-jump`                                        | dired at current file
`SPC p d` | `helm-projectile-find-ini includes recentf          | &nbsp;
`C-x b`   | `helm-buffers-list`                                 | &nbsp;
`SPC b W` | `spacemacs/goto-buffer-workspace`                   | go to where that buffer is displayed (if it is)
`SPC B b` | `spacemacs-layouts/non-restricted-buffer-list-helm` | &nbsp;

*** projects

| `SPC p`   | projects                                            |                                                 |
| `SPC p b` | `helm-projectile-switch-to-buffer`                  |                                                 |
| -         | `persp-switch-to-buffer`                            |                                                 |

*** files

| `SPC f f` | `helm-find-files`                | open files (helm)         |
| `SPC f F` | `spacemacs/helm-find-files`      | open files (helm)         |
| `SPC f r` | `helm-recentf`                   | recent files (helm)       |
| `C-c p e` | `projectile-recentf`             | recent files (projectile) |
| `SPC p r` | `helm-projectile-recentf `       |                           |
| `SPC p f` | `helm-projectile-find-file`      |                           |
| `SPC p F` | `helm-projectile-find-file-dwim` | find file with dwim       |


* help

`[`, `]` | back/forward
`SPC h` | help
`SPC h k` | show top level keys
`SPC h d` | describe...
`SPC h d c` | ...char
`SPC h d k` | ...key
`SPC h d f` | ...function
`SPC h d m` | ...mode (with keybindings)
`SPC h d t` | ...theme
`SPC h d v` | `describe-variable` | ...variable
`SPC h SPC` | lookup doc, layers, packages, dotfile, toggles, faq
`SPC ?` | `helm-descbinds`
`C-h e` | see startup error messages

`SPC t n` | toggle line numbers
`SPC t r` | toggle relative line numbers
`SPC t l` | toggle line wrap


* search

`SPC /` | search project - spacemacs/helm-project-smart-do-search
`SPC s f` | ag (smart-do-search) from current (or arbitrary) directory
`SPC s s` | ag current file (swoop)
`SPC s b` | ag open buffers
`helm-ag` | ag and then helm the results
`helm-ag-this-file` | " this file
`SPC *` | search project at point
`g;` | go to last edit
`gf` | go to file at point
`\s-` | white space [ ] (<Tab> and <Space>)
`\S-` | non-white characters [^ ] (not <Tab> and <Space>)

Delete/remove trailing whitespace:
`SPC x d w` | `delete-trailing-whitespace`

Delete/remove unwanted/empty/blank lines:
`:g/^$/d`
`:v/./d`
`:g/^\s-*$/d`
`:v/\S-/d`
`flush-lines`

Break opening HTML tags to new line:
`:%s/<\([:alpha:]\)/<\n<\1`

regex and character classes and syntax classes:
https://www.emacswiki.org/emacs/RegularExpression


* interface

`SPC T M` | maximize
`f11` | `spacemacs/toggle-frame-fullscreen-non-native`


* evil

Enter evil lisp state with `SPC k .` ... use `j` and `k` to navigate parentheses/brackets, `C-[` to leave




* buffer narrowing

`C-x n` | prefix
`C-x n d` | narrow to block
`C-x n e` | narrow to element
`C-x n r` | narrow to region
`C-x n s` | narrow to subtree
`C-x n w` | widen
`SPC n w` | widen

* layouts

"Perspectives" is managing layouts.

`SPC l` | `spacemacs/layouts-transient-state/body `
`SPC C-s a` | `persp-load-state-from-file` | load




* misc

`SPC t C-d` | toggle git fringe globally
`SPC , i` | [custom] helm imenu
`C-s )` | (in insert mode) insert literal parenthesis (don't allow smart entry)
`SPC u SPC b d` | close window along with buffer delete
`SPC u SPC w d` | delete buffer along with close window
`SPC b e` | erase buffer contents
`SPC b P` | paste clipbaord contents over all buffer content
`SPC b Y` | copy entire/full buffer to clipboard
`SPC o` and `SPC m o` | reserved for the user
`SPC j u` | jump to URL

`-*-` | use to surround a (commented) first line in a file to specify file variables
`; -*- mode: Emacs-Lisp; -*-` | specify major mode in first line of a file

manual 23.3 [Choosing File Modes](https://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html)

`SPC u SPC !` | shell command into current buffer

** formatting/indenting/auto-format/autoformat

`C-M-\` | indent-region
`C-x TAB` | indent-rigidly
`TAB` | indent-for-tab-command
`M-)` | move-past-close-and-reindent
`>>` | shifts right `evil-shift-width` amount

#+BEGIN_SRC emacs-lisp
(setq standard-indent 2)
(setq tab-width 2)
(my-setup-indent 2)
#+END_SRC

`SPC , t 2` | set
`SPC = j` | format
`SPC t h i` | `spacemacs/toggle-highlight-indentation`
`SPC t h c` | `spacemacs/toggle-highlight-indentation-current-column`



`C-x h` | select all
`M-S-;` | eval-experssion
`M-x list-packages` | see all packages
`q` | exit debugger
`g c c` | toggle comment
`SPC t n` | line numbers
`SPC t r` | relative line numbers
`SPC tab` | alternate buffer
`SPC f y` | kill full path & filename
`SPC r y` | see kill ring
`SPC r r` | see registers, different format than `:reg`
`SPC x w d` | `osx-dictionary-search-pointer` | dictionary

** bookmarks

`C-x r m` | set bookmark
`C-x r j` | jump to bookmark
`C-x r l` | bookmark list

** registers
Registers can hold text, rectangles, or positions.

`SPC r r` | `helm-register` | register list

** tabs/indents

tab-width: https://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Display.html#Text-Display



* modes

[Minor modes](http://ergoemacs.org/emacs/emacs_minor_mode.html)

`SPC h d m` | `spacemacs-describe-mode` | describe mode
`C-h v major-mode` | see current major mode
`M-: major-mode` | see current major mode
`M-x normal-mode` | revert to the buffer's original mode

* Windows

`SPC w d` | delete
`SPC w h/j/k/l` | move
`SPC w m` | toggle maximize
`SPC v/V/s/S` | split or split with focus

* shells

** term

`C-c C-j` | switch to line mode
`C-c C-k` | switch to char mode

** eshell

`C-p`, `C-n` | previous/next input [custom]
`M-p`, `M-n` | previous/next match
`C-c C-p`, `C-c C-n` | previous/next prompt

** man

`(customize-group 'man)`

* neotree

`SPC p t` | start at project root
`SPC f t`, `f3` | toggle
`K` | parent
`R` | make root
`|` | vsplit
`-` | split
`s` | toggle hidden TODO make 'i' like vim



* dired

[Quick ref PDF](https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf)

`w` | `dired-copy-filename-as-kill` | copy filename
`SPC u 0 w` | copy filename with full path
`o` | open in other window
`C-o` | open in new window
`+` | `dired-create-directory` | create directory
`i` | `dired-maybe-insert-subdir` | insert sub-directory
`m` & `u` | mark & unmark
`* !` | `dired-unmark-all-files` | unmark all
`t` | toggle all
`* /` | mark all directories
`* / t` | mark all files
`d` | mark for deletion
`x` | `dired-do-flagged-delete` | delete deletion-marked files
`!` | run shell command
`SPC f f` | new file (at current directory)
`R` | rename/mv
`C` | copy
`R` | rename/move
`D` | delete
`S` | symlink
`g` | refresh ("read aGain")
`l` | relist file at point
`s` | sort toggle
`(` | toggle details
`A` | search marked
`C-x C-q` | switch to wdired
`C-c C-c` | save wdired changes
`(` | toggle details
`J` | find files from here

* keybindings

[Spacemacs Guide](https://github.com/syl20bnr/spacemacs/wiki/Keymaps-guide)

`evil-insert-state-map`

#+BEGIN_SRC emacs-lisp
;; these are the same... they are preceded with SPC
(evil-leader/set-key ",h" 'eyebrowse-prev-winow-config')
(spacemacs/set-leader-keys "'" 'projectile-run-term)
#+END_SRC





* color

var `custom-enabled-themes`

`(get-faces (point))` | all faces
`,fh` | `describe-face` | [custom shortcut]


* markdown

`orgtbl-mode` "hijacks" tab.

* org-mode

[examples and cookbook](http://ehneilsen.net/notebook/orgExamples/org-examples.html)
[cheatsheet](https://emacsclub.github.io/html/org_tutorial.html#sec-8-1)

`< s <tab>` | [snippet] expands `*+BEGIN_SRC` ... `*+END_SRC` ('s' for src)

`SPC x o` | open link
`org-version` | version
`<S-tab>` | cycle all
`C-c C-p` & `C-c C-n` | prev/next headline
`C-c C-f` & `C-c C-b` | prev/next same-level headline
`C-c C-u` | up level
`>`, `<` | `org-metaright`, like `<M-right>`
`M-<ret>` | new headline or list elements
`C-<ret>` | new same-level headline below current headline group
`M-<up>` & `M-<down>` | move subtree or list element
`M-<left>` & `M-<right>` | promote/demote heading or list element
`M-S-<left>` & `M-S-<right>` | promote/demote heading or list element
`: [[http://example.com][ex]]` | use `:` at ^ to preserve no-formatting

** todos

`S-M-<ret>` | new TODO
`C-c C-t` & `S-<right>/<left>` | rotate/cycle TODO state

#+BEGIN_SRC emacs-lisp
*bold*, /italic/, _underline_
[[https://sinistrocular.com][birds link]]
#+END_SRC

** capture template placeholders

Jonathan Magen's talk on [youtube](https://www.youtube.com/watch?v=KdcXu_RdKI0)

`%U` | inactive timestamp
`%^{Name}` | prompt/read
`%a` | annotation `org-store-link` (takes you back to where you were)
`%i` | active region
`%?` | final cursor position

org-protocol-capture-html on [github](https://github.com/alphapapa/org-protocol-capture-html)

> With this, you can capture HTML content directly into Org, converted into Org syntax with Pandoc.
>
> For example, to capture your comment into Org, I just highlight it in Pentadactyl (Firefox), press "cc", and Emacs pops up a capture buffer with your comment inserted into the capture template. Or if I press "ch", it passes it through Pandoc, converting HTML lists, tables, headings, code blocks, etc. into their Org counterparts.
>
> I also just added support for python-readability, so if I press "cr", the URL of the page is sent to python-readability, which gets the article content (just like the good ol' Readability bookmarklet), then passes it through Pandoc, and then places it into the capture template.






** babel

`C-c C-c` | evaluate
`C-c '` | open/close major mode editing buffer
`SPC t C-c` | [custom] toggle no-eval on/off

*+BEGIN_SRC js
let test = [1, 2];
console.log(Math.max(...test));
*+END_SRC

Evaluation controls: `org-confirm-babel-evaluate`, `org-babel-no-eval-on-ctrl-c-ctrl-c`.


`setenv "NODE_PATH"` specifically to `/org/node_modules`: [link](http://rwx.io/blog/2016/03/09/org-with-babel-node-updated/). Install babel presets to `/org`, symlink `/org/node_modules/babel-cli/bin/babel-node.js` as `org-babel-node` to path.

*+BEGIN_SRC js :cmd "org-babel-node --presets=stage-2"
let obj = {
  fruit: "apple",
  veggie: "kale",
  meat: "tofu"
}

let { fruit, ...restItem } = obj;

console.log(fruit);
console.log(restItem);
*+END_SRC

** export

[WORG publishing org-mode -> HTML](http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html)
[WORG org -> jekyll](http://orgmode.org/worg/org-tutorials/org-jekyll.html)
[happyblogger](https://github.com/bmaland/happyblogger)
[org2jekyll](https://github.com/ardumont/org2jekyll)
[org-jekyll](https://github.com/juanre/org-jekyll)

[cheatsheet](https://emacsclub.github.io/html/org_tutorial.html)

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)
(setq org-publish-project-alist
      '(

        ("org-notes"
         :base-directory "~/scratch/org-test/org/"
         :base-extension "org"
         :publishing-directory "~/scratch/org-test/public_html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t
         )


        ("org-static"
         :base-directory "~/scratch/org-test/org/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/scratch/org-test/public_html/"
         :recursive t
         :publishing-function org-publish-attachment
         )

        ("org" :components ("org-notes" "org-static"))

        ))
#+END_SRC




* helm and helm-projectile

NOTE: seems like marking multiple files and then opening all buffers in their own windows does not work by default. (Does in helm-mini, but not helm-projectile or helm-projectile-find-file or helm-find-file.) (Bug?) I must pass universal argument for it to work. But only once. After that, no universal-argument is required ... as if doing it once "fixes" it. I mapped universal argument to C-return:

`(define-key helm-map (kbd "C-<return>") 'universal-argument)`



`C-c ?` | help
`C-S-h` | describe key binding

`C-o` | jump to next section
`M-P`, `M-N` | prev/next search
`<left>`, `<right>` | prev/next file in results
`F3` | (for helm search) open results in buffer/promote to buffer
`C-s` | grep highlighted dir/file
`C-z` | show actions
`C-SPC` | toggle mark
`M-a` | toggle all
`C-c o` | open other window
`C-]` | toggle info
`C-c >` | truncate line (TODO where is this available?)
`M-D` | delete
`C-t` | toggle display horizontal/vertical
`SPC .`, `M-m r l` | resume last completion buffer, use universal argument to choose
`SPC r s` | resume last search buffer
`SPC s \`` | go to last place reached with helm ag
`C-o` | next source
`C-c =` | ediff file
`C-c X` | open with default app (also see `C-c C-x`)
`C-c TAB` | copy to buffer
`C-c C-y` | helm yank selection (sorta like hippie-expand)

`C-x C-b` | (in helm) resume different helm buffer
`C-s` | (from helm-projectile `SPC p p`) start ag search from directory

** helm projectile project

`C-d` | jump to dired

** helm ag

`C-x C-s`  | Save ag results to buffer (Ask save buffer name if prefix key is specified)
`C-c C-f`  | Enable helm-follow-mode
`C-c >`, `right`  | Move to next file
`C-c <`, `left`  | Move to previous file
`C-c C-e`  | Switch to edit mode

** helm misc

`SPC s w g` | google suggest
`SPC s w w` | wikipedia suggest
`f2` | [in file & projectile] jump to dired

** error buffer

`SPC e n`, `SPC e p` | next/previous
`SPC e` | error transient state

#+BEGIN_SRC emacs-lisp
(setq powerline-default-separator 'utf-8)
(setq powerline-default-separator 'zigzag)
#+BEGIN_SRC emacs-lisp

`*dired` | filter major-mode dired
`*!dired` | filter exclude major-mode dired



* yasnippet

Spacelayers 'auto-completion' mode add `indent-for-tab-command` to TAB (`(kbd "C-i")`). Yasnippet expand is `M-/`, `C-p`: `hippie-expand`.

`SPC i s v` | `helm-yas-visit-snippet-file`
`SPC i s n` | `yas-new-snippet`
`SPC i s h` | `spacemacs/helm-yas` | major mode snippets



* magit / git

[manual](https://magit.vc/manual/magit.html)

** general

`]h`, `[h` | next/prev hunk
`SPC g f f` | `magit-find-file` | open revision
`SPC g f h` | `magit-log-buffer-file` | history/log for current buffer
`SPC g d w` | `magit-diff-working-tree` | all changes - quickly check if branch is clean

** from status

`C-u s` | [point at untracked file] track without staging ("git add --intent-to-add")
`M-1`, `M-2`, `M-3`, `M-4` | outline expansion
`^` | up
`M-w` | copy (kill) hash/revision
`d` | diff options (e.g. whitespace)
`d s` | `magit-diff-staged` | see everything that would commit
`E i` | `magit-ediff-show-staged` | ediff a file that has staged changes (`SPC g e s`)
`=` | split file's hunks into more/smaller hunks
`+` | split file's hunks into fewer/larger hunks
`0` | reset file's hunk qty/size

** from log

`O` | [in log] reset popup

** from commit

`M-p` | [in commit window] pull up previously used commit messages

** from popup

`?` | describe key
`C-t` | show popup menu

** misc

[reddit workflows](https://www.reddit.com/r/emacs/comments/2n9tj8/anyone_care_to_share_their_magit_workflow/)
[infix arguements and suffix commands](https://github.com/magit/magit/wiki/Additional-proposed-infix-arguments-and-suffix-commands)
[macOS - use emacs-plus to reduce sluggishness](https://magit.vc/manual/magit/MacOS-Performance.html)

`(magit-define-popup-switch 'magit-log-popup ?m "Omit merge commits" "--no-merges")`




* JS

[rjxs-mode](https://github.com/felipeochoa/rjsx-mode)

** js2-mode

`SPC m w` | `js2-mode-toggle-warnings-and-errors` | toggle errors (e.g. underline missing semicolons

see [emacs stack exchange](https://emacs.stackexchange.com/questions/26949/can-i-turn-off-or-switch-the-syntax-checker-for-js2-mode)



** JSX-IDE mode

`C-c C-o` | toggle element
`C-c C-f` | toggle all funtions
`C-c @ C-c` | toggle block
`C-c @ C-h`, `C-c @ C-s` | hide/show block



** React

prevent/don't auto-add quotes/quotation marks after typing `=` in JSX attributes

`(setq-local web-mode-enable-auto-quoting nil)`



# Links

[Spacemacs Advanced Kit](http://oss.io/p/trishume/spacemacs)
[Org Cheat Sheet](https://emacsclub.github.io/html/org_tutorial.html#sec-8-1)
